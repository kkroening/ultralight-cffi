"""
WARNING: This file is generated automatically by ``scripts/_build.py``.
Do not edit this file by hand!
"""

import enum
from . import _base
from ._base import Pointer
from collections.abc import Callable
from typing import Any
from typing import TypeAlias


class OpaqueJSContextGroup: ...


JSContextGroupRef: TypeAlias = Pointer[OpaqueJSContextGroup]


class OpaqueJSContext: ...


JSContextRef: TypeAlias = Pointer[OpaqueJSContext]
JSGlobalContextRef: TypeAlias = Pointer[OpaqueJSContext]


class OpaqueJSString: ...


JSStringRef: TypeAlias = Pointer[OpaqueJSString]


class OpaqueJSClass: ...


JSClassRef: TypeAlias = Pointer[OpaqueJSClass]


class OpaqueJSPropertyNameArray: ...


JSPropertyNameArrayRef: TypeAlias = Pointer[OpaqueJSPropertyNameArray]


class OpaqueJSPropertyNameAccumulator: ...


JSPropertyNameAccumulatorRef: TypeAlias = Pointer[OpaqueJSPropertyNameAccumulator]
JSTypedArrayBytesDeallocator: TypeAlias = Callable[[Any, Any], None]


class OpaqueJSValue: ...


JSValueRef: TypeAlias = Pointer[OpaqueJSValue]
JSObjectRef: TypeAlias = Pointer[OpaqueJSValue]


def JSEvaluateScript(
    arg0: JSContextRef,
    arg1: JSStringRef,
    arg2: JSObjectRef,
    arg3: JSStringRef,
    arg4: int,
    arg5: Pointer[JSValueRef],
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSEvaluateScript(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
        )
    )


def JSCheckScriptSyntax(
    arg0: JSContextRef,
    arg1: JSStringRef,
    arg2: JSStringRef,
    arg3: int,
    arg4: Pointer[JSValueRef],
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSCheckScriptSyntax(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
        )
    )


def JSGarbageCollect(
    arg0: JSContextRef,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSGarbageCollect(  # type: ignore[attr-defined]
            arg0,
        )
    )


class JSType(enum.IntEnum):
    kJSTypeUndefined = 0
    kJSTypeNull = 1
    kJSTypeBoolean = 2
    kJSTypeNumber = 3
    kJSTypeString = 4
    kJSTypeObject = 5
    kJSTypeSymbol = 6


kJSTypeUndefined = JSType.kJSTypeUndefined
kJSTypeNull = JSType.kJSTypeNull
kJSTypeBoolean = JSType.kJSTypeBoolean
kJSTypeNumber = JSType.kJSTypeNumber
kJSTypeString = JSType.kJSTypeString
kJSTypeObject = JSType.kJSTypeObject
kJSTypeSymbol = JSType.kJSTypeSymbol


class JSTypedArrayType(enum.IntEnum):
    kJSTypedArrayTypeInt8Array = 0
    kJSTypedArrayTypeInt16Array = 1
    kJSTypedArrayTypeInt32Array = 2
    kJSTypedArrayTypeUint8Array = 3
    kJSTypedArrayTypeUint8ClampedArray = 4
    kJSTypedArrayTypeUint16Array = 5
    kJSTypedArrayTypeUint32Array = 6
    kJSTypedArrayTypeFloat32Array = 7
    kJSTypedArrayTypeFloat64Array = 8
    kJSTypedArrayTypeArrayBuffer = 9
    kJSTypedArrayTypeNone = 10
    kJSTypedArrayTypeBigInt64Array = 11
    kJSTypedArrayTypeBigUint64Array = 12


kJSTypedArrayTypeInt8Array = JSTypedArrayType.kJSTypedArrayTypeInt8Array
kJSTypedArrayTypeInt16Array = JSTypedArrayType.kJSTypedArrayTypeInt16Array
kJSTypedArrayTypeInt32Array = JSTypedArrayType.kJSTypedArrayTypeInt32Array
kJSTypedArrayTypeUint8Array = JSTypedArrayType.kJSTypedArrayTypeUint8Array
kJSTypedArrayTypeUint8ClampedArray = JSTypedArrayType.kJSTypedArrayTypeUint8ClampedArray
kJSTypedArrayTypeUint16Array = JSTypedArrayType.kJSTypedArrayTypeUint16Array
kJSTypedArrayTypeUint32Array = JSTypedArrayType.kJSTypedArrayTypeUint32Array
kJSTypedArrayTypeFloat32Array = JSTypedArrayType.kJSTypedArrayTypeFloat32Array
kJSTypedArrayTypeFloat64Array = JSTypedArrayType.kJSTypedArrayTypeFloat64Array
kJSTypedArrayTypeArrayBuffer = JSTypedArrayType.kJSTypedArrayTypeArrayBuffer
kJSTypedArrayTypeNone = JSTypedArrayType.kJSTypedArrayTypeNone
kJSTypedArrayTypeBigInt64Array = JSTypedArrayType.kJSTypedArrayTypeBigInt64Array
kJSTypedArrayTypeBigUint64Array = JSTypedArrayType.kJSTypedArrayTypeBigUint64Array


def JSValueGetType(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> JSType:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueGetType(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueIsUndefined(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsUndefined(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueIsNull(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsNull(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueIsBoolean(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsBoolean(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueIsNumber(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsNumber(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueIsString(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsString(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueIsSymbol(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsSymbol(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueIsObject(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsObject(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueIsObjectOfClass(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: JSClassRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsObjectOfClass(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSValueIsArray(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsArray(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueIsDate(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsDate(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueGetTypedArrayType(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: Pointer[JSValueRef],
    /,
) -> JSTypedArrayType:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueGetTypedArrayType(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSValueIsEqual(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: JSValueRef,
    arg3: Pointer[JSValueRef],
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsEqual(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSValueIsStrictEqual(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: JSValueRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsStrictEqual(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSValueIsInstanceOfConstructor(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: JSObjectRef,
    arg3: Pointer[JSValueRef],
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueIsInstanceOfConstructor(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSValueMakeUndefined(
    arg0: JSContextRef,
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueMakeUndefined(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSValueMakeNull(
    arg0: JSContextRef,
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueMakeNull(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSValueMakeBoolean(
    arg0: JSContextRef,
    arg1: bool,
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueMakeBoolean(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueMakeNumber(
    arg0: JSContextRef,
    arg1: float,
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueMakeNumber(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueMakeString(
    arg0: JSContextRef,
    arg1: JSStringRef,
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueMakeString(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueMakeSymbol(
    arg0: JSContextRef,
    arg1: JSStringRef,
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueMakeSymbol(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueMakeFromJSONString(
    arg0: JSContextRef,
    arg1: JSStringRef,
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueMakeFromJSONString(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueCreateJSONString(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: int,
    arg3: Pointer[JSValueRef],
    /,
) -> JSStringRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueCreateJSONString(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSValueToBoolean(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueToBoolean(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueToNumber(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: Pointer[JSValueRef],
    /,
) -> float:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueToNumber(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSValueToStringCopy(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: Pointer[JSValueRef],
    /,
) -> JSStringRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueToStringCopy(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSValueToObject(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueToObject(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSValueProtect(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueProtect(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSValueUnprotect(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSValueUnprotect(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


JSObjectInitializeCallback: TypeAlias = Callable[[JSContextRef, JSObjectRef], None]

JSObjectFinalizeCallback: TypeAlias = Callable[[JSObjectRef], None]

JSObjectHasPropertyCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSStringRef], bool
]

JSObjectGetPropertyCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSStringRef, Pointer[JSValueRef]], JSValueRef
]

JSObjectSetPropertyCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSStringRef, JSValueRef, Pointer[JSValueRef]], bool
]

JSObjectDeletePropertyCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSStringRef, Pointer[JSValueRef]], bool
]

JSObjectGetPropertyNamesCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSPropertyNameAccumulatorRef], None
]

JSObjectCallAsFunctionCallback: TypeAlias = Callable[
    [
        JSContextRef,
        JSObjectRef,
        JSObjectRef,
        int,
        Pointer[JSValueRef],
        Pointer[JSValueRef],
    ],
    JSValueRef,
]

JSObjectCallAsConstructorCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, int, Pointer[JSValueRef], Pointer[JSValueRef]],
    JSObjectRef,
]

JSObjectHasInstanceCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSValueRef, Pointer[JSValueRef]], bool
]

JSObjectConvertToTypeCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSType, Pointer[JSValueRef]], JSValueRef
]


class JSStaticValue:
    name: bytes
    getProperty: JSObjectGetPropertyCallback
    setProperty: JSObjectSetPropertyCallback
    attributes: int


class JSStaticFunction:
    name: bytes
    callAsFunction: JSObjectCallAsFunctionCallback
    attributes: int


class JSClassDefinition:
    version: int
    attributes: int
    className: bytes
    parentClass: JSClassRef
    staticValues: Pointer[JSStaticValue]
    staticFunctions: Pointer[JSStaticFunction]
    initialize: JSObjectInitializeCallback
    finalize: JSObjectFinalizeCallback
    hasProperty: JSObjectHasPropertyCallback
    getProperty: JSObjectGetPropertyCallback
    setProperty: JSObjectSetPropertyCallback
    deleteProperty: JSObjectDeletePropertyCallback
    getPropertyNames: JSObjectGetPropertyNamesCallback
    callAsFunction: JSObjectCallAsFunctionCallback
    callAsConstructor: JSObjectCallAsConstructorCallback
    hasInstance: JSObjectHasInstanceCallback
    convertToType: JSObjectConvertToTypeCallback


# constant: constant kJSClassDefinitionEmpty


def JSClassCreate(
    arg0: Pointer[JSClassDefinition],
    /,
) -> JSClassRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSClassCreate(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSClassRetain(
    arg0: JSClassRef,
    /,
) -> JSClassRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSClassRetain(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSClassRelease(
    arg0: JSClassRef,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSClassRelease(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSObjectMake(
    arg0: JSContextRef,
    arg1: JSClassRef,
    arg2: Any,
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMake(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSObjectMakeFunctionWithCallback(
    arg0: JSContextRef,
    arg1: JSStringRef,
    arg2: JSObjectCallAsFunctionCallback,
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeFunctionWithCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSObjectMakeConstructor(
    arg0: JSContextRef,
    arg1: JSClassRef,
    arg2: JSObjectCallAsConstructorCallback,
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeConstructor(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSObjectMakeArray(
    arg0: JSContextRef,
    arg1: int,
    arg2: Pointer[JSValueRef],
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeArray(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSObjectMakeDate(
    arg0: JSContextRef,
    arg1: int,
    arg2: Pointer[JSValueRef],
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeDate(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSObjectMakeError(
    arg0: JSContextRef,
    arg1: int,
    arg2: Pointer[JSValueRef],
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeError(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSObjectMakeRegExp(
    arg0: JSContextRef,
    arg1: int,
    arg2: Pointer[JSValueRef],
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeRegExp(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSObjectMakeDeferredPromise(
    arg0: JSContextRef,
    arg1: Pointer[JSObjectRef],
    arg2: Pointer[JSObjectRef],
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeDeferredPromise(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSObjectMakeFunction(
    arg0: JSContextRef,
    arg1: JSStringRef,
    arg2: int,
    arg3: Pointer[JSStringRef],
    arg4: JSStringRef,
    arg5: JSStringRef,
    arg6: int,
    arg7: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeFunction(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
            arg6,
            arg7,
        )
    )


def JSObjectGetPrototype(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectGetPrototype(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSObjectSetPrototype(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSValueRef,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectSetPrototype(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSObjectHasProperty(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSStringRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectHasProperty(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSObjectGetProperty(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSStringRef,
    arg3: Pointer[JSValueRef],
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectGetProperty(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSObjectSetProperty(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSStringRef,
    arg3: JSValueRef,
    arg4: int,
    arg5: Pointer[JSValueRef],
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectSetProperty(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
        )
    )


def JSObjectDeleteProperty(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSStringRef,
    arg3: Pointer[JSValueRef],
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectDeleteProperty(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSObjectHasPropertyForKey(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSValueRef,
    arg3: Pointer[JSValueRef],
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectHasPropertyForKey(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSObjectGetPropertyForKey(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSValueRef,
    arg3: Pointer[JSValueRef],
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectGetPropertyForKey(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSObjectSetPropertyForKey(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSValueRef,
    arg3: JSValueRef,
    arg4: int,
    arg5: Pointer[JSValueRef],
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectSetPropertyForKey(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
        )
    )


def JSObjectDeletePropertyForKey(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSValueRef,
    arg3: Pointer[JSValueRef],
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectDeletePropertyForKey(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSObjectGetPropertyAtIndex(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: int,
    arg3: Pointer[JSValueRef],
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectGetPropertyAtIndex(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def JSObjectSetPropertyAtIndex(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: int,
    arg3: JSValueRef,
    arg4: Pointer[JSValueRef],
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectSetPropertyAtIndex(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
        )
    )


def JSObjectGetPrivate(
    arg0: JSObjectRef,
    /,
) -> Any:
    return _base.get_lib().JSObjectGetPrivate(  # type: ignore[attr-defined]
        arg0,
    )


def JSObjectSetPrivate(
    arg0: JSObjectRef,
    arg1: Any,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectSetPrivate(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSObjectIsFunction(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectIsFunction(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSObjectCallAsFunction(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSObjectRef,
    arg3: int,
    arg4: Pointer[JSValueRef],
    arg5: Pointer[JSValueRef],
    /,
) -> JSValueRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectCallAsFunction(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
        )
    )


def JSObjectIsConstructor(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectIsConstructor(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSObjectCallAsConstructor(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: int,
    arg3: Pointer[JSValueRef],
    arg4: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectCallAsConstructor(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
        )
    )


def JSObjectCopyPropertyNames(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    /,
) -> JSPropertyNameArrayRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectCopyPropertyNames(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSPropertyNameArrayRetain(
    arg0: JSPropertyNameArrayRef,
    /,
) -> JSPropertyNameArrayRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSPropertyNameArrayRetain(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSPropertyNameArrayRelease(
    arg0: JSPropertyNameArrayRef,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSPropertyNameArrayRelease(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSPropertyNameArrayGetCount(
    arg0: JSPropertyNameArrayRef,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSPropertyNameArrayGetCount(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSPropertyNameArrayGetNameAtIndex(
    arg0: JSPropertyNameArrayRef,
    arg1: int,
    /,
) -> JSStringRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSPropertyNameArrayGetNameAtIndex(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSPropertyNameAccumulatorAddName(
    arg0: JSPropertyNameAccumulatorRef,
    arg1: JSStringRef,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSPropertyNameAccumulatorAddName(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSContextGroupCreate() -> JSContextGroupRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSContextGroupCreate()  # type: ignore[attr-defined]
    )


def JSContextGroupRetain(
    arg0: JSContextGroupRef,
    /,
) -> JSContextGroupRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSContextGroupRetain(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSContextGroupRelease(
    arg0: JSContextGroupRef,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSContextGroupRelease(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSGlobalContextCreate(
    arg0: JSClassRef,
    /,
) -> JSGlobalContextRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSGlobalContextCreate(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSGlobalContextCreateInGroup(
    arg0: JSContextGroupRef,
    arg1: JSClassRef,
    /,
) -> JSGlobalContextRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSGlobalContextCreateInGroup(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSGlobalContextRetain(
    arg0: JSGlobalContextRef,
    /,
) -> JSGlobalContextRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSGlobalContextRetain(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSGlobalContextRelease(
    arg0: JSGlobalContextRef,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSGlobalContextRelease(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSContextGetGlobalObject(
    arg0: JSContextRef,
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSContextGetGlobalObject(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSContextGetGroup(
    arg0: JSContextRef,
    /,
) -> JSContextGroupRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSContextGetGroup(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSContextGetGlobalContext(
    arg0: JSContextRef,
    /,
) -> JSGlobalContextRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSContextGetGlobalContext(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSGlobalContextCopyName(
    arg0: JSGlobalContextRef,
    /,
) -> JSStringRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSGlobalContextCopyName(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSGlobalContextSetName(
    arg0: JSGlobalContextRef,
    arg1: JSStringRef,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSGlobalContextSetName(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSGlobalContextIsInspectable(
    arg0: JSGlobalContextRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSGlobalContextIsInspectable(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSGlobalContextSetInspectable(
    arg0: JSGlobalContextRef,
    arg1: bool,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSGlobalContextSetInspectable(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSStringCreateWithCharacters(
    arg0: Pointer[int],
    arg1: int,
    /,
) -> JSStringRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSStringCreateWithCharacters(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSStringCreateWithUTF8CString(
    arg0: bytes,
    /,
) -> JSStringRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSStringCreateWithUTF8CString(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSStringRetain(
    arg0: JSStringRef,
    /,
) -> JSStringRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSStringRetain(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSStringRelease(
    arg0: JSStringRef,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSStringRelease(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSStringGetLength(
    arg0: JSStringRef,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSStringGetLength(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSStringGetCharactersPtr(
    arg0: JSStringRef,
    /,
) -> Pointer[int]:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSStringGetCharactersPtr(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSStringGetMaximumUTF8CStringSize(
    arg0: JSStringRef,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSStringGetMaximumUTF8CStringSize(  # type: ignore[attr-defined]
            arg0,
        )
    )


def JSStringGetUTF8CString(
    arg0: JSStringRef,
    arg1: bytes,
    arg2: int,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSStringGetUTF8CString(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSStringIsEqual(
    arg0: JSStringRef,
    arg1: JSStringRef,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSStringIsEqual(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSStringIsEqualToUTF8CString(
    arg0: JSStringRef,
    arg1: bytes,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSStringIsEqualToUTF8CString(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def JSObjectMakeTypedArray(
    arg0: JSContextRef,
    arg1: JSTypedArrayType,
    arg2: int,
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeTypedArray(  # type: ignore[attr-defined]
            arg0,
            arg1.value,
            arg2,
            arg3,
        )
    )


def JSObjectMakeTypedArrayWithBytesNoCopy(
    arg0: JSContextRef,
    arg1: JSTypedArrayType,
    arg2: Any,
    arg3: int,
    arg4: JSTypedArrayBytesDeallocator,
    arg5: Any,
    arg6: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeTypedArrayWithBytesNoCopy(  # type: ignore[attr-defined]
            arg0,
            arg1.value,
            arg2,
            arg3,
            arg4,
            arg5,
            arg6,
        )
    )


def JSObjectMakeTypedArrayWithArrayBuffer(
    arg0: JSContextRef,
    arg1: JSTypedArrayType,
    arg2: JSObjectRef,
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeTypedArrayWithArrayBuffer(  # type: ignore[attr-defined]
            arg0,
            arg1.value,
            arg2,
            arg3,
        )
    )


def JSObjectMakeTypedArrayWithArrayBufferAndOffset(
    arg0: JSContextRef,
    arg1: JSTypedArrayType,
    arg2: JSObjectRef,
    arg3: int,
    arg4: int,
    arg5: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeTypedArrayWithArrayBufferAndOffset(  # type: ignore[attr-defined]
            arg0,
            arg1.value,
            arg2,
            arg3,
            arg4,
            arg5,
        )
    )


def JSObjectGetTypedArrayBytesPtr(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> Any:
    return _base.get_lib().JSObjectGetTypedArrayBytesPtr(  # type: ignore[attr-defined]
        arg0,
        arg1,
        arg2,
    )


def JSObjectGetTypedArrayLength(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectGetTypedArrayLength(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSObjectGetTypedArrayByteLength(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectGetTypedArrayByteLength(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSObjectGetTypedArrayByteOffset(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectGetTypedArrayByteOffset(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSObjectGetTypedArrayBuffer(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectGetTypedArrayBuffer(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def JSObjectMakeArrayBufferWithBytesNoCopy(
    arg0: JSContextRef,
    arg1: Any,
    arg2: int,
    arg3: JSTypedArrayBytesDeallocator,
    arg4: Any,
    arg5: Pointer[JSValueRef],
    /,
) -> JSObjectRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectMakeArrayBufferWithBytesNoCopy(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
        )
    )


def JSObjectGetArrayBufferBytesPtr(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> Any:
    return _base.get_lib().JSObjectGetArrayBufferBytesPtr(  # type: ignore[attr-defined]
        arg0,
        arg1,
        arg2,
    )


def JSObjectGetArrayBufferByteLength(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().JSObjectGetArrayBufferByteLength(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


class C_Config: ...


ULConfig: TypeAlias = Pointer[C_Config]


class C_Renderer: ...


ULRenderer: TypeAlias = Pointer[C_Renderer]


class C_Session: ...


ULSession: TypeAlias = Pointer[C_Session]


class C_ViewConfig: ...


ULViewConfig: TypeAlias = Pointer[C_ViewConfig]


class C_View: ...


ULView: TypeAlias = Pointer[C_View]


class C_Bitmap: ...


ULBitmap: TypeAlias = Pointer[C_Bitmap]


class C_String: ...


ULString: TypeAlias = Pointer[C_String]


class C_Buffer: ...


ULBuffer: TypeAlias = Pointer[C_Buffer]


class C_KeyEvent: ...


ULKeyEvent: TypeAlias = Pointer[C_KeyEvent]


class C_MouseEvent: ...


ULMouseEvent: TypeAlias = Pointer[C_MouseEvent]


class C_ScrollEvent: ...


ULScrollEvent: TypeAlias = Pointer[C_ScrollEvent]


class C_GamepadEvent: ...


ULGamepadEvent: TypeAlias = Pointer[C_GamepadEvent]


class C_GamepadAxisEvent: ...


ULGamepadAxisEvent: TypeAlias = Pointer[C_GamepadAxisEvent]


class C_GamepadButtonEvent: ...


ULGamepadButtonEvent: TypeAlias = Pointer[C_GamepadButtonEvent]


class C_Surface: ...


ULSurface: TypeAlias = Pointer[C_Surface]
ULBitmapSurface: TypeAlias = Pointer[C_Surface]


class C_FontFile: ...


ULFontFile: TypeAlias = Pointer[C_FontFile]


class C_ImageSource: ...


ULImageSource: TypeAlias = Pointer[C_ImageSource]


class ULMessageSource(enum.IntEnum):
    kMessageSource_XML = 0
    kMessageSource_JS = 1
    kMessageSource_Network = 2
    kMessageSource_ConsoleAPI = 3
    kMessageSource_Storage = 4
    kMessageSource_AppCache = 5
    kMessageSource_Rendering = 6
    kMessageSource_CSS = 7
    kMessageSource_Security = 8
    kMessageSource_ContentBlocker = 9
    kMessageSource_Media = 10
    kMessageSource_MediaSource = 11
    kMessageSource_WebRTC = 12
    kMessageSource_ITPDebug = 13
    kMessageSource_PrivateClickMeasurement = 14
    kMessageSource_PaymentRequest = 15
    kMessageSource_Other = 16


kMessageSource_XML = ULMessageSource.kMessageSource_XML
kMessageSource_JS = ULMessageSource.kMessageSource_JS
kMessageSource_Network = ULMessageSource.kMessageSource_Network
kMessageSource_ConsoleAPI = ULMessageSource.kMessageSource_ConsoleAPI
kMessageSource_Storage = ULMessageSource.kMessageSource_Storage
kMessageSource_AppCache = ULMessageSource.kMessageSource_AppCache
kMessageSource_Rendering = ULMessageSource.kMessageSource_Rendering
kMessageSource_CSS = ULMessageSource.kMessageSource_CSS
kMessageSource_Security = ULMessageSource.kMessageSource_Security
kMessageSource_ContentBlocker = ULMessageSource.kMessageSource_ContentBlocker
kMessageSource_Media = ULMessageSource.kMessageSource_Media
kMessageSource_MediaSource = ULMessageSource.kMessageSource_MediaSource
kMessageSource_WebRTC = ULMessageSource.kMessageSource_WebRTC
kMessageSource_ITPDebug = ULMessageSource.kMessageSource_ITPDebug
kMessageSource_PrivateClickMeasurement = (
    ULMessageSource.kMessageSource_PrivateClickMeasurement
)
kMessageSource_PaymentRequest = ULMessageSource.kMessageSource_PaymentRequest
kMessageSource_Other = ULMessageSource.kMessageSource_Other


class ULMessageLevel(enum.IntEnum):
    kMessageLevel_Log = 0
    kMessageLevel_Warning = 1
    kMessageLevel_Error = 2
    kMessageLevel_Debug = 3
    kMessageLevel_Info = 4


kMessageLevel_Log = ULMessageLevel.kMessageLevel_Log
kMessageLevel_Warning = ULMessageLevel.kMessageLevel_Warning
kMessageLevel_Error = ULMessageLevel.kMessageLevel_Error
kMessageLevel_Debug = ULMessageLevel.kMessageLevel_Debug
kMessageLevel_Info = ULMessageLevel.kMessageLevel_Info


class ULCursor(enum.IntEnum):
    kCursor_Pointer = 0
    kCursor_Cross = 1
    kCursor_Hand = 2
    kCursor_IBeam = 3
    kCursor_Wait = 4
    kCursor_Help = 5
    kCursor_EastResize = 6
    kCursor_NorthResize = 7
    kCursor_NorthEastResize = 8
    kCursor_NorthWestResize = 9
    kCursor_SouthResize = 10
    kCursor_SouthEastResize = 11
    kCursor_SouthWestResize = 12
    kCursor_WestResize = 13
    kCursor_NorthSouthResize = 14
    kCursor_EastWestResize = 15
    kCursor_NorthEastSouthWestResize = 16
    kCursor_NorthWestSouthEastResize = 17
    kCursor_ColumnResize = 18
    kCursor_RowResize = 19
    kCursor_MiddlePanning = 20
    kCursor_EastPanning = 21
    kCursor_NorthPanning = 22
    kCursor_NorthEastPanning = 23
    kCursor_NorthWestPanning = 24
    kCursor_SouthPanning = 25
    kCursor_SouthEastPanning = 26
    kCursor_SouthWestPanning = 27
    kCursor_WestPanning = 28
    kCursor_Move = 29
    kCursor_VerticalText = 30
    kCursor_Cell = 31
    kCursor_ContextMenu = 32
    kCursor_Alias = 33
    kCursor_Progress = 34
    kCursor_NoDrop = 35
    kCursor_Copy = 36
    kCursor_None = 37
    kCursor_NotAllowed = 38
    kCursor_ZoomIn = 39
    kCursor_ZoomOut = 40
    kCursor_Grab = 41
    kCursor_Grabbing = 42
    kCursor_Custom = 43


kCursor_Pointer = ULCursor.kCursor_Pointer
kCursor_Cross = ULCursor.kCursor_Cross
kCursor_Hand = ULCursor.kCursor_Hand
kCursor_IBeam = ULCursor.kCursor_IBeam
kCursor_Wait = ULCursor.kCursor_Wait
kCursor_Help = ULCursor.kCursor_Help
kCursor_EastResize = ULCursor.kCursor_EastResize
kCursor_NorthResize = ULCursor.kCursor_NorthResize
kCursor_NorthEastResize = ULCursor.kCursor_NorthEastResize
kCursor_NorthWestResize = ULCursor.kCursor_NorthWestResize
kCursor_SouthResize = ULCursor.kCursor_SouthResize
kCursor_SouthEastResize = ULCursor.kCursor_SouthEastResize
kCursor_SouthWestResize = ULCursor.kCursor_SouthWestResize
kCursor_WestResize = ULCursor.kCursor_WestResize
kCursor_NorthSouthResize = ULCursor.kCursor_NorthSouthResize
kCursor_EastWestResize = ULCursor.kCursor_EastWestResize
kCursor_NorthEastSouthWestResize = ULCursor.kCursor_NorthEastSouthWestResize
kCursor_NorthWestSouthEastResize = ULCursor.kCursor_NorthWestSouthEastResize
kCursor_ColumnResize = ULCursor.kCursor_ColumnResize
kCursor_RowResize = ULCursor.kCursor_RowResize
kCursor_MiddlePanning = ULCursor.kCursor_MiddlePanning
kCursor_EastPanning = ULCursor.kCursor_EastPanning
kCursor_NorthPanning = ULCursor.kCursor_NorthPanning
kCursor_NorthEastPanning = ULCursor.kCursor_NorthEastPanning
kCursor_NorthWestPanning = ULCursor.kCursor_NorthWestPanning
kCursor_SouthPanning = ULCursor.kCursor_SouthPanning
kCursor_SouthEastPanning = ULCursor.kCursor_SouthEastPanning
kCursor_SouthWestPanning = ULCursor.kCursor_SouthWestPanning
kCursor_WestPanning = ULCursor.kCursor_WestPanning
kCursor_Move = ULCursor.kCursor_Move
kCursor_VerticalText = ULCursor.kCursor_VerticalText
kCursor_Cell = ULCursor.kCursor_Cell
kCursor_ContextMenu = ULCursor.kCursor_ContextMenu
kCursor_Alias = ULCursor.kCursor_Alias
kCursor_Progress = ULCursor.kCursor_Progress
kCursor_NoDrop = ULCursor.kCursor_NoDrop
kCursor_Copy = ULCursor.kCursor_Copy
kCursor_None = ULCursor.kCursor_None
kCursor_NotAllowed = ULCursor.kCursor_NotAllowed
kCursor_ZoomIn = ULCursor.kCursor_ZoomIn
kCursor_ZoomOut = ULCursor.kCursor_ZoomOut
kCursor_Grab = ULCursor.kCursor_Grab
kCursor_Grabbing = ULCursor.kCursor_Grabbing
kCursor_Custom = ULCursor.kCursor_Custom


class ULBitmapFormat(enum.IntEnum):
    kBitmapFormat_A8_UNORM = 0
    kBitmapFormat_BGRA8_UNORM_SRGB = 1


kBitmapFormat_A8_UNORM = ULBitmapFormat.kBitmapFormat_A8_UNORM
kBitmapFormat_BGRA8_UNORM_SRGB = ULBitmapFormat.kBitmapFormat_BGRA8_UNORM_SRGB


class ULKeyEventType(enum.IntEnum):
    kKeyEventType_KeyDown = 0
    kKeyEventType_KeyUp = 1
    kKeyEventType_RawKeyDown = 2
    kKeyEventType_Char = 3


kKeyEventType_KeyDown = ULKeyEventType.kKeyEventType_KeyDown
kKeyEventType_KeyUp = ULKeyEventType.kKeyEventType_KeyUp
kKeyEventType_RawKeyDown = ULKeyEventType.kKeyEventType_RawKeyDown
kKeyEventType_Char = ULKeyEventType.kKeyEventType_Char


class ULMouseEventType(enum.IntEnum):
    kMouseEventType_MouseMoved = 0
    kMouseEventType_MouseDown = 1
    kMouseEventType_MouseUp = 2


kMouseEventType_MouseMoved = ULMouseEventType.kMouseEventType_MouseMoved
kMouseEventType_MouseDown = ULMouseEventType.kMouseEventType_MouseDown
kMouseEventType_MouseUp = ULMouseEventType.kMouseEventType_MouseUp


class ULMouseButton(enum.IntEnum):
    kMouseButton_None = 0
    kMouseButton_Left = 1
    kMouseButton_Middle = 2
    kMouseButton_Right = 3


kMouseButton_None = ULMouseButton.kMouseButton_None
kMouseButton_Left = ULMouseButton.kMouseButton_Left
kMouseButton_Middle = ULMouseButton.kMouseButton_Middle
kMouseButton_Right = ULMouseButton.kMouseButton_Right


class ULScrollEventType(enum.IntEnum):
    kScrollEventType_ScrollByPixel = 0
    kScrollEventType_ScrollByPage = 1


kScrollEventType_ScrollByPixel = ULScrollEventType.kScrollEventType_ScrollByPixel
kScrollEventType_ScrollByPage = ULScrollEventType.kScrollEventType_ScrollByPage


class ULGamepadEventType(enum.IntEnum):
    kGamepadEventType_Connected = 0
    kGamepadEventType_Disconnected = 1


kGamepadEventType_Connected = ULGamepadEventType.kGamepadEventType_Connected
kGamepadEventType_Disconnected = ULGamepadEventType.kGamepadEventType_Disconnected


class ULFaceWinding(enum.IntEnum):
    kFaceWinding_Clockwise = 0
    kFaceWinding_CounterClockwise = 1


kFaceWinding_Clockwise = ULFaceWinding.kFaceWinding_Clockwise
kFaceWinding_CounterClockwise = ULFaceWinding.kFaceWinding_CounterClockwise


class ULFontHinting(enum.IntEnum):
    kFontHinting_Smooth = 0
    kFontHinting_Normal = 1
    kFontHinting_Monochrome = 2


kFontHinting_Smooth = ULFontHinting.kFontHinting_Smooth
kFontHinting_Normal = ULFontHinting.kFontHinting_Normal
kFontHinting_Monochrome = ULFontHinting.kFontHinting_Monochrome


class ULRect:
    left: float
    top: float
    right: float
    bottom: float


class ULIntRect:
    left: int
    top: int
    right: int
    bottom: int


class ULRenderTarget:
    is_empty: bool
    width: int
    height: int
    texture_id: int
    texture_width: int
    texture_height: int
    texture_format: ULBitmapFormat
    uv_coords: ULRect
    render_buffer_id: int


def ulVersionString() -> bytes:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulVersionString()  # type: ignore[attr-defined]
    )


def ulVersionMajor() -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulVersionMajor()  # type: ignore[attr-defined]
    )


def ulVersionMinor() -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulVersionMinor()  # type: ignore[attr-defined]
    )


def ulVersionPatch() -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulVersionPatch()  # type: ignore[attr-defined]
    )


def ulWebKitVersionString() -> bytes:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWebKitVersionString()  # type: ignore[attr-defined]
    )


def ulCreateEmptyBitmap() -> ULBitmap:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateEmptyBitmap()  # type: ignore[attr-defined]
    )


def ulCreateBitmap(
    arg0: int,
    arg1: int,
    arg2: ULBitmapFormat,
    /,
) -> ULBitmap:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateBitmap(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2.value,
        )
    )


def ulCreateBitmapFromPixels(
    arg0: int,
    arg1: int,
    arg2: ULBitmapFormat,
    arg3: int,
    arg4: Any,
    arg5: int,
    arg6: bool,
    /,
) -> ULBitmap:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateBitmapFromPixels(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2.value,
            arg3,
            arg4,
            arg5,
            arg6,
        )
    )


def ulCreateBitmapFromCopy(
    arg0: ULBitmap,
    /,
) -> ULBitmap:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateBitmapFromCopy(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulDestroyBitmap(
    arg0: ULBitmap,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyBitmap(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBitmapGetWidth(
    arg0: ULBitmap,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapGetWidth(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBitmapGetHeight(
    arg0: ULBitmap,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapGetHeight(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBitmapGetFormat(
    arg0: ULBitmap,
    /,
) -> ULBitmapFormat:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapGetFormat(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBitmapGetBpp(
    arg0: ULBitmap,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapGetBpp(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBitmapGetRowBytes(
    arg0: ULBitmap,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapGetRowBytes(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBitmapGetSize(
    arg0: ULBitmap,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapGetSize(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBitmapOwnsPixels(
    arg0: ULBitmap,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapOwnsPixels(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBitmapLockPixels(
    arg0: ULBitmap,
    /,
) -> Any:
    return _base.get_lib().ulBitmapLockPixels(  # type: ignore[attr-defined]
        arg0,
    )


def ulBitmapUnlockPixels(
    arg0: ULBitmap,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapUnlockPixels(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBitmapRawPixels(
    arg0: ULBitmap,
    /,
) -> Any:
    return _base.get_lib().ulBitmapRawPixels(  # type: ignore[attr-defined]
        arg0,
    )


def ulBitmapIsEmpty(
    arg0: ULBitmap,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapIsEmpty(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBitmapErase(
    arg0: ULBitmap,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapErase(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBitmapWritePNG(
    arg0: ULBitmap,
    arg1: bytes,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapWritePNG(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulBitmapSwapRedBlueChannels(
    arg0: ULBitmap,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapSwapRedBlueChannels(  # type: ignore[attr-defined]
            arg0,
        )
    )


ulDestroyBufferCallback: TypeAlias = Callable[[Any, Any], None]


def ulCreateBuffer(
    arg0: Any,
    arg1: int,
    arg2: Any,
    arg3: ulDestroyBufferCallback,
    /,
) -> ULBuffer:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateBuffer(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def ulCreateBufferFromCopy(
    arg0: Any,
    arg1: int,
    /,
) -> ULBuffer:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateBufferFromCopy(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulDestroyBuffer(
    arg0: ULBuffer,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyBuffer(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBufferGetData(
    arg0: ULBuffer,
    /,
) -> Any:
    return _base.get_lib().ulBufferGetData(  # type: ignore[attr-defined]
        arg0,
    )


def ulBufferGetSize(
    arg0: ULBuffer,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBufferGetSize(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulBufferGetUserData(
    arg0: ULBuffer,
    /,
) -> Any:
    return _base.get_lib().ulBufferGetUserData(  # type: ignore[attr-defined]
        arg0,
    )


def ulBufferOwnsData(
    arg0: ULBuffer,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBufferOwnsData(  # type: ignore[attr-defined]
            arg0,
        )
    )


ULClipboardClearCallback: TypeAlias = Callable[[], None]

ULClipboardReadPlainTextCallback: TypeAlias = Callable[[ULString], None]

ULClipboardWritePlainTextCallback: TypeAlias = Callable[[ULString], None]


class ULClipboard:
    clear: ULClipboardClearCallback
    read_plain_text: ULClipboardReadPlainTextCallback
    write_plain_text: ULClipboardWritePlainTextCallback


def ulCreateConfig() -> ULConfig:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateConfig()  # type: ignore[attr-defined]
    )


def ulDestroyConfig(
    arg0: ULConfig,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyConfig(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulConfigSetCachePath(
    arg0: ULConfig,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetCachePath(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetResourcePathPrefix(
    arg0: ULConfig,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetResourcePathPrefix(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetFaceWinding(
    arg0: ULConfig,
    arg1: ULFaceWinding,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetFaceWinding(  # type: ignore[attr-defined]
            arg0,
            arg1.value,
        )
    )


def ulConfigSetFontHinting(
    arg0: ULConfig,
    arg1: ULFontHinting,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetFontHinting(  # type: ignore[attr-defined]
            arg0,
            arg1.value,
        )
    )


def ulConfigSetFontGamma(
    arg0: ULConfig,
    arg1: float,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetFontGamma(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetUserStylesheet(
    arg0: ULConfig,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetUserStylesheet(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetForceRepaint(
    arg0: ULConfig,
    arg1: bool,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetForceRepaint(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetAnimationTimerDelay(
    arg0: ULConfig,
    arg1: float,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetAnimationTimerDelay(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetScrollTimerDelay(
    arg0: ULConfig,
    arg1: float,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetScrollTimerDelay(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetRecycleDelay(
    arg0: ULConfig,
    arg1: float,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetRecycleDelay(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetMemoryCacheSize(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetMemoryCacheSize(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetPageCacheSize(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetPageCacheSize(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetOverrideRAMSize(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetOverrideRAMSize(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetMinLargeHeapSize(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetMinLargeHeapSize(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetMinSmallHeapSize(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetMinSmallHeapSize(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetNumRendererThreads(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetNumRendererThreads(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetMaxUpdateTime(
    arg0: ULConfig,
    arg1: float,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetMaxUpdateTime(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulConfigSetBitmapAlignment(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulConfigSetBitmapAlignment(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


ULFileSystemFileExistsCallback: TypeAlias = Callable[[ULString], bool]

ULFileSystemGetFileMimeTypeCallback: TypeAlias = Callable[[ULString], ULString]

ULFileSystemGetFileCharsetCallback: TypeAlias = Callable[[ULString], ULString]

ULFileSystemOpenFileCallback: TypeAlias = Callable[[ULString], ULBuffer]


class ULFileSystem:
    file_exists: ULFileSystemFileExistsCallback
    get_file_mime_type: ULFileSystemGetFileMimeTypeCallback
    get_file_charset: ULFileSystemGetFileCharsetCallback
    open_file: ULFileSystemOpenFileCallback


def ulCreateString(
    arg0: bytes,
    /,
) -> ULString:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateString(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulCreateStringUTF8(
    arg0: bytes,
    arg1: int,
    /,
) -> ULString:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateStringUTF8(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulCreateStringUTF16(
    arg0: Pointer[int],
    arg1: int,
    /,
) -> ULString:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateStringUTF16(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulCreateStringFromCopy(
    arg0: ULString,
    /,
) -> ULString:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateStringFromCopy(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulDestroyString(
    arg0: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyString(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulStringGetData(
    arg0: ULString,
    /,
) -> bytes:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulStringGetData(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulStringGetLength(
    arg0: ULString,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulStringGetLength(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulStringIsEmpty(
    arg0: ULString,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulStringIsEmpty(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulStringAssignString(
    arg0: ULString,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulStringAssignString(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulStringAssignCString(
    arg0: ULString,
    arg1: bytes,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulStringAssignCString(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulFontFileCreateFromFilePath(
    arg0: ULString,
    /,
) -> ULFontFile:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulFontFileCreateFromFilePath(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulFontFileCreateFromBuffer(
    arg0: ULBuffer,
    /,
) -> ULFontFile:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulFontFileCreateFromBuffer(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulDestroyFontFile(
    arg0: ULFontFile,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyFontFile(  # type: ignore[attr-defined]
            arg0,
        )
    )


ULFontLoaderGetFallbackFont: TypeAlias = Callable[[], ULString]

ULFontLoaderGetFallbackFontForCharacters: TypeAlias = Callable[
    [ULString, int, bool], ULString
]

ULFontLoaderLoad: TypeAlias = Callable[[ULString, int, bool], ULFontFile]


class ULFontLoader:
    get_fallback_font: ULFontLoaderGetFallbackFont
    get_fallback_font_for_characters: ULFontLoaderGetFallbackFontForCharacters
    load: ULFontLoaderLoad


def ulRectIsEmpty(
    arg0: ULRect,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulRectIsEmpty(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulRectMakeEmpty() -> ULRect:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulRectMakeEmpty()  # type: ignore[attr-defined]
    )


def ulIntRectIsEmpty(
    arg0: ULIntRect,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulIntRectIsEmpty(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulIntRectMakeEmpty() -> ULIntRect:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulIntRectMakeEmpty()  # type: ignore[attr-defined]
    )


class ULRenderBuffer:
    texture_id: int
    width: int
    height: int
    has_stencil_buffer: bool
    has_depth_buffer: bool


class ULVertex_2f_4ub_2f:
    pos: Pointer[float]
    color: Pointer[int]
    obj: Pointer[float]


class ULVertex_2f_4ub_2f_2f_28f:
    pos: Pointer[float]
    color: Pointer[int]
    tex: Pointer[float]
    obj: Pointer[float]
    data0: Pointer[float]
    data1: Pointer[float]
    data2: Pointer[float]
    data3: Pointer[float]
    data4: Pointer[float]
    data5: Pointer[float]
    data6: Pointer[float]


class ULVertexBufferFormat(enum.IntEnum):
    kVertexBufferFormat_2f_4ub_2f = 0
    kVertexBufferFormat_2f_4ub_2f_2f_28f = 1


kVertexBufferFormat_2f_4ub_2f = ULVertexBufferFormat.kVertexBufferFormat_2f_4ub_2f
kVertexBufferFormat_2f_4ub_2f_2f_28f = (
    ULVertexBufferFormat.kVertexBufferFormat_2f_4ub_2f_2f_28f
)


class ULVertexBuffer:
    format: ULVertexBufferFormat
    size: int
    data: Pointer[int]


class ULIndexBuffer:
    size: int
    data: Pointer[int]


class ULShaderType(enum.IntEnum):
    kShaderType_Fill = 0
    kShaderType_FillPath = 1


kShaderType_Fill = ULShaderType.kShaderType_Fill
kShaderType_FillPath = ULShaderType.kShaderType_FillPath


class ULMatrix4x4:
    data: Pointer[float]


class ULvec4:
    value: Pointer[float]


class ULGPUState:
    viewport_width: int
    viewport_height: int
    transform: ULMatrix4x4
    enable_texturing: bool
    enable_blend: bool
    shader_type: int
    render_buffer_id: int
    texture_1_id: int
    texture_2_id: int
    texture_3_id: int
    uniform_scalar: Pointer[float]
    uniform_vector: Pointer[ULvec4]
    clip_size: int
    clip: Pointer[ULMatrix4x4]
    enable_scissor: bool
    scissor_rect: ULIntRect


class ULCommandType(enum.IntEnum):
    kCommandType_ClearRenderBuffer = 0
    kCommandType_DrawGeometry = 1


kCommandType_ClearRenderBuffer = ULCommandType.kCommandType_ClearRenderBuffer
kCommandType_DrawGeometry = ULCommandType.kCommandType_DrawGeometry


class ULCommand:
    command_type: int
    gpu_state: ULGPUState
    geometry_id: int
    indices_count: int
    indices_offset: int


class ULCommandList:
    size: int
    commands: Pointer[ULCommand]


ULGPUDriverBeginSynchronizeCallback: TypeAlias = Callable[[], None]

ULGPUDriverEndSynchronizeCallback: TypeAlias = Callable[[], None]

ULGPUDriverNextTextureIdCallback: TypeAlias = Callable[[], int]

ULGPUDriverCreateTextureCallback: TypeAlias = Callable[[int, ULBitmap], None]

ULGPUDriverUpdateTextureCallback: TypeAlias = Callable[[int, ULBitmap], None]

ULGPUDriverDestroyTextureCallback: TypeAlias = Callable[[int], None]

ULGPUDriverNextRenderBufferIdCallback: TypeAlias = Callable[[], int]

ULGPUDriverCreateRenderBufferCallback: TypeAlias = Callable[[int, ULRenderBuffer], None]

ULGPUDriverDestroyRenderBufferCallback: TypeAlias = Callable[[int], None]

ULGPUDriverNextGeometryIdCallback: TypeAlias = Callable[[], int]

ULGPUDriverCreateGeometryCallback: TypeAlias = Callable[
    [int, ULVertexBuffer, ULIndexBuffer], None
]

ULGPUDriverUpdateGeometryCallback: TypeAlias = Callable[
    [int, ULVertexBuffer, ULIndexBuffer], None
]

ULGPUDriverDestroyGeometryCallback: TypeAlias = Callable[[int], None]

ULGPUDriverUpdateCommandListCallback: TypeAlias = Callable[[ULCommandList], None]


class ULGPUDriver:
    begin_synchronize: ULGPUDriverBeginSynchronizeCallback
    end_synchronize: ULGPUDriverEndSynchronizeCallback
    next_texture_id: ULGPUDriverNextTextureIdCallback
    create_texture: ULGPUDriverCreateTextureCallback
    update_texture: ULGPUDriverUpdateTextureCallback
    destroy_texture: ULGPUDriverDestroyTextureCallback
    next_render_buffer_id: ULGPUDriverNextRenderBufferIdCallback
    create_render_buffer: ULGPUDriverCreateRenderBufferCallback
    destroy_render_buffer: ULGPUDriverDestroyRenderBufferCallback
    next_geometry_id: ULGPUDriverNextGeometryIdCallback
    create_geometry: ULGPUDriverCreateGeometryCallback
    update_geometry: ULGPUDriverUpdateGeometryCallback
    destroy_geometry: ULGPUDriverDestroyGeometryCallback
    update_command_list: ULGPUDriverUpdateCommandListCallback


def ulApplyProjection(
    arg0: ULMatrix4x4,
    arg1: float,
    arg2: float,
    arg3: bool,
    /,
) -> ULMatrix4x4:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulApplyProjection(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def ulCreateImageSourceFromTexture(
    arg0: int,
    arg1: int,
    arg2: int,
    arg3: ULRect,
    arg4: ULBitmap,
    /,
) -> ULImageSource:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateImageSourceFromTexture(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
        )
    )


def ulCreateImageSourceFromBitmap(
    arg0: ULBitmap,
    /,
) -> ULImageSource:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateImageSourceFromBitmap(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulDestroyImageSource(
    arg0: ULImageSource,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyImageSource(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulImageSourceInvalidate(
    arg0: ULImageSource,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulImageSourceInvalidate(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulImageSourceProviderAddImageSource(
    arg0: ULString,
    arg1: ULImageSource,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulImageSourceProviderAddImageSource(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulImageSourceProviderRemoveImageSource(
    arg0: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulImageSourceProviderRemoveImageSource(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulCreateKeyEvent(
    arg0: ULKeyEventType,
    arg1: int,
    arg2: int,
    arg3: int,
    arg4: ULString,
    arg5: ULString,
    arg6: bool,
    arg7: bool,
    arg8: bool,
    /,
) -> ULKeyEvent:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateKeyEvent(  # type: ignore[attr-defined]
            arg0.value,
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
            arg6,
            arg7,
            arg8,
        )
    )


def ulDestroyKeyEvent(
    arg0: ULKeyEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyKeyEvent(  # type: ignore[attr-defined]
            arg0,
        )
    )


class ULLogLevel(enum.IntEnum):
    kLogLevel_Error = 0
    kLogLevel_Warning = 1
    kLogLevel_Info = 2


kLogLevel_Error = ULLogLevel.kLogLevel_Error
kLogLevel_Warning = ULLogLevel.kLogLevel_Warning
kLogLevel_Info = ULLogLevel.kLogLevel_Info


ULLoggerLogMessageCallback: TypeAlias = Callable[[ULLogLevel, ULString], None]


class ULLogger:
    log_message: ULLoggerLogMessageCallback


def ulCreateMouseEvent(
    arg0: ULMouseEventType,
    arg1: int,
    arg2: int,
    arg3: ULMouseButton,
    /,
) -> ULMouseEvent:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateMouseEvent(  # type: ignore[attr-defined]
            arg0.value,
            arg1,
            arg2,
            arg3.value,
        )
    )


def ulDestroyMouseEvent(
    arg0: ULMouseEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyMouseEvent(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSurfaceGetWidth(
    arg0: ULSurface,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSurfaceGetWidth(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSurfaceGetHeight(
    arg0: ULSurface,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSurfaceGetHeight(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSurfaceGetRowBytes(
    arg0: ULSurface,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSurfaceGetRowBytes(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSurfaceGetSize(
    arg0: ULSurface,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSurfaceGetSize(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSurfaceLockPixels(
    arg0: ULSurface,
    /,
) -> Any:
    return _base.get_lib().ulSurfaceLockPixels(  # type: ignore[attr-defined]
        arg0,
    )


def ulSurfaceUnlockPixels(
    arg0: ULSurface,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSurfaceUnlockPixels(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSurfaceResize(
    arg0: ULSurface,
    arg1: int,
    arg2: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSurfaceResize(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulSurfaceSetDirtyBounds(
    arg0: ULSurface,
    arg1: ULIntRect,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSurfaceSetDirtyBounds(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulSurfaceGetDirtyBounds(
    arg0: ULSurface,
    /,
) -> ULIntRect:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSurfaceGetDirtyBounds(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSurfaceClearDirtyBounds(
    arg0: ULSurface,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSurfaceClearDirtyBounds(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSurfaceGetUserData(
    arg0: ULSurface,
    /,
) -> Any:
    return _base.get_lib().ulSurfaceGetUserData(  # type: ignore[attr-defined]
        arg0,
    )


def ulBitmapSurfaceGetBitmap(
    arg0: ULBitmapSurface,
    /,
) -> ULBitmap:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulBitmapSurfaceGetBitmap(  # type: ignore[attr-defined]
            arg0,
        )
    )


ULSurfaceDefinitionCreateCallback: TypeAlias = Callable[[int, int], Any]

ULSurfaceDefinitionDestroyCallback: TypeAlias = Callable[[Any], None]

ULSurfaceDefinitionGetWidthCallback: TypeAlias = Callable[[Any], int]

ULSurfaceDefinitionGetHeightCallback: TypeAlias = Callable[[Any], int]

ULSurfaceDefinitionGetRowBytesCallback: TypeAlias = Callable[[Any], int]

ULSurfaceDefinitionGetSizeCallback: TypeAlias = Callable[[Any], int]

ULSurfaceDefinitionLockPixelsCallback: TypeAlias = Callable[[Any], Any]

ULSurfaceDefinitionUnlockPixelsCallback: TypeAlias = Callable[[Any], None]

ULSurfaceDefinitionResizeCallback: TypeAlias = Callable[[Any, int, int], None]


class ULSurfaceDefinition:
    create: ULSurfaceDefinitionCreateCallback
    destroy: ULSurfaceDefinitionDestroyCallback
    get_width: ULSurfaceDefinitionGetWidthCallback
    get_height: ULSurfaceDefinitionGetHeightCallback
    get_row_bytes: ULSurfaceDefinitionGetRowBytesCallback
    get_size: ULSurfaceDefinitionGetSizeCallback
    lock_pixels: ULSurfaceDefinitionLockPixelsCallback
    unlock_pixels: ULSurfaceDefinitionUnlockPixelsCallback
    resize: ULSurfaceDefinitionResizeCallback


def ulPlatformSetLogger(
    arg0: ULLogger,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulPlatformSetLogger(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulPlatformSetFileSystem(
    arg0: ULFileSystem,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulPlatformSetFileSystem(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulPlatformSetFontLoader(
    arg0: ULFontLoader,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulPlatformSetFontLoader(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulPlatformSetSurfaceDefinition(
    arg0: ULSurfaceDefinition,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulPlatformSetSurfaceDefinition(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulPlatformSetGPUDriver(
    arg0: ULGPUDriver,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulPlatformSetGPUDriver(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulPlatformSetClipboard(
    arg0: ULClipboard,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulPlatformSetClipboard(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulCreateRenderer(
    arg0: ULConfig,
    /,
) -> ULRenderer:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateRenderer(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulDestroyRenderer(
    arg0: ULRenderer,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyRenderer(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulUpdate(
    arg0: ULRenderer,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulUpdate(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulRefreshDisplay(
    arg0: ULRenderer,
    arg1: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulRefreshDisplay(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulRender(
    arg0: ULRenderer,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulRender(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulPurgeMemory(
    arg0: ULRenderer,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulPurgeMemory(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulLogMemoryUsage(
    arg0: ULRenderer,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulLogMemoryUsage(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulStartRemoteInspectorServer(
    arg0: ULRenderer,
    arg1: bytes,
    arg2: int,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulStartRemoteInspectorServer(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulSetGamepadDetails(
    arg0: ULRenderer,
    arg1: int,
    arg2: ULString,
    arg3: int,
    arg4: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSetGamepadDetails(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
        )
    )


def ulFireGamepadEvent(
    arg0: ULRenderer,
    arg1: ULGamepadEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulFireGamepadEvent(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulFireGamepadAxisEvent(
    arg0: ULRenderer,
    arg1: ULGamepadAxisEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulFireGamepadAxisEvent(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulFireGamepadButtonEvent(
    arg0: ULRenderer,
    arg1: ULGamepadButtonEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulFireGamepadButtonEvent(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulCreateScrollEvent(
    arg0: ULScrollEventType,
    arg1: int,
    arg2: int,
    /,
) -> ULScrollEvent:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateScrollEvent(  # type: ignore[attr-defined]
            arg0.value,
            arg1,
            arg2,
        )
    )


def ulDestroyScrollEvent(
    arg0: ULScrollEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyScrollEvent(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulCreateGamepadEvent(
    arg0: int,
    arg1: ULGamepadEventType,
    /,
) -> ULGamepadEvent:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateGamepadEvent(  # type: ignore[attr-defined]
            arg0,
            arg1.value,
        )
    )


def ulDestroyGamepadEvent(
    arg0: ULGamepadEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyGamepadEvent(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulCreateGamepadAxisEvent(
    arg0: int,
    arg1: int,
    arg2: float,
    /,
) -> ULGamepadAxisEvent:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateGamepadAxisEvent(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulDestroyGamepadAxisEvent(
    arg0: ULGamepadAxisEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyGamepadAxisEvent(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulCreateGamepadButtonEvent(
    arg0: int,
    arg1: int,
    arg2: float,
    /,
) -> ULGamepadButtonEvent:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateGamepadButtonEvent(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulDestroyGamepadButtonEvent(
    arg0: ULGamepadButtonEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyGamepadButtonEvent(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulCreateSession(
    arg0: ULRenderer,
    arg1: bool,
    arg2: ULString,
    /,
) -> ULSession:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateSession(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulDestroySession(
    arg0: ULSession,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroySession(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulDefaultSession(
    arg0: ULRenderer,
    /,
) -> ULSession:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDefaultSession(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSessionIsPersistent(
    arg0: ULSession,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSessionIsPersistent(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSessionGetName(
    arg0: ULSession,
    /,
) -> ULString:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSessionGetName(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSessionGetId(
    arg0: ULSession,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSessionGetId(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSessionGetDiskPath(
    arg0: ULSession,
    /,
) -> ULString:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSessionGetDiskPath(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulCreateViewConfig() -> ULViewConfig:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateViewConfig()  # type: ignore[attr-defined]
    )


def ulDestroyViewConfig(
    arg0: ULViewConfig,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyViewConfig(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewConfigSetDisplayId(
    arg0: ULViewConfig,
    arg1: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetDisplayId(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewConfigSetIsAccelerated(
    arg0: ULViewConfig,
    arg1: bool,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetIsAccelerated(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewConfigSetIsTransparent(
    arg0: ULViewConfig,
    arg1: bool,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetIsTransparent(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewConfigSetInitialDeviceScale(
    arg0: ULViewConfig,
    arg1: float,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetInitialDeviceScale(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewConfigSetInitialFocus(
    arg0: ULViewConfig,
    arg1: bool,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetInitialFocus(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewConfigSetEnableImages(
    arg0: ULViewConfig,
    arg1: bool,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetEnableImages(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewConfigSetEnableJavaScript(
    arg0: ULViewConfig,
    arg1: bool,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetEnableJavaScript(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewConfigSetFontFamilyStandard(
    arg0: ULViewConfig,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetFontFamilyStandard(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewConfigSetFontFamilyFixed(
    arg0: ULViewConfig,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetFontFamilyFixed(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewConfigSetFontFamilySerif(
    arg0: ULViewConfig,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetFontFamilySerif(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewConfigSetFontFamilySansSerif(
    arg0: ULViewConfig,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetFontFamilySansSerif(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewConfigSetUserAgent(
    arg0: ULViewConfig,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewConfigSetUserAgent(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulCreateView(
    arg0: ULRenderer,
    arg1: int,
    arg2: int,
    arg3: ULViewConfig,
    arg4: ULSession,
    /,
) -> ULView:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateView(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
        )
    )


def ulDestroyView(
    arg0: ULView,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyView(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewGetURL(
    arg0: ULView,
    /,
) -> ULString:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGetURL(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewGetTitle(
    arg0: ULView,
    /,
) -> ULString:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGetTitle(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewGetWidth(
    arg0: ULView,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGetWidth(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewGetHeight(
    arg0: ULView,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGetHeight(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewGetDisplayId(
    arg0: ULView,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGetDisplayId(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewSetDisplayId(
    arg0: ULView,
    arg1: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetDisplayId(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewGetDeviceScale(
    arg0: ULView,
    /,
) -> float:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGetDeviceScale(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewSetDeviceScale(
    arg0: ULView,
    arg1: float,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetDeviceScale(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewIsAccelerated(
    arg0: ULView,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewIsAccelerated(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewIsTransparent(
    arg0: ULView,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewIsTransparent(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewIsLoading(
    arg0: ULView,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewIsLoading(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewGetRenderTarget(
    arg0: ULView,
    /,
) -> ULRenderTarget:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGetRenderTarget(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewGetSurface(
    arg0: ULView,
    /,
) -> ULSurface:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGetSurface(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewLoadHTML(
    arg0: ULView,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewLoadHTML(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewLoadURL(
    arg0: ULView,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewLoadURL(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewResize(
    arg0: ULView,
    arg1: int,
    arg2: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewResize(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulViewLockJSContext(
    arg0: ULView,
    /,
) -> JSContextRef:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewLockJSContext(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewUnlockJSContext(
    arg0: ULView,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewUnlockJSContext(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewEvaluateScript(
    arg0: ULView,
    arg1: ULString,
    arg2: Pointer[ULString],
    /,
) -> ULString:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewEvaluateScript(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulViewCanGoBack(
    arg0: ULView,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewCanGoBack(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewCanGoForward(
    arg0: ULView,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewCanGoForward(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewGoBack(
    arg0: ULView,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGoBack(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewGoForward(
    arg0: ULView,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGoForward(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewGoToHistoryOffset(
    arg0: ULView,
    arg1: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGoToHistoryOffset(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewReload(
    arg0: ULView,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewReload(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewStop(
    arg0: ULView,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewStop(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewFocus(
    arg0: ULView,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewFocus(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewUnfocus(
    arg0: ULView,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewUnfocus(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewHasFocus(
    arg0: ULView,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewHasFocus(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewHasInputFocus(
    arg0: ULView,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewHasInputFocus(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewFireKeyEvent(
    arg0: ULView,
    arg1: ULKeyEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewFireKeyEvent(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewFireMouseEvent(
    arg0: ULView,
    arg1: ULMouseEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewFireMouseEvent(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewFireScrollEvent(
    arg0: ULView,
    arg1: ULScrollEvent,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewFireScrollEvent(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


ULChangeTitleCallback: TypeAlias = Callable[[Any, ULView, ULString], None]


def ulViewSetChangeTitleCallback(
    arg0: ULView,
    arg1: ULChangeTitleCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetChangeTitleCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULChangeURLCallback: TypeAlias = Callable[[Any, ULView, ULString], None]


def ulViewSetChangeURLCallback(
    arg0: ULView,
    arg1: ULChangeURLCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetChangeURLCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULChangeTooltipCallback: TypeAlias = Callable[[Any, ULView, ULString], None]


def ulViewSetChangeTooltipCallback(
    arg0: ULView,
    arg1: ULChangeTooltipCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetChangeTooltipCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULChangeCursorCallback: TypeAlias = Callable[[Any, ULView, ULCursor], None]


def ulViewSetChangeCursorCallback(
    arg0: ULView,
    arg1: ULChangeCursorCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetChangeCursorCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULAddConsoleMessageCallback: TypeAlias = Callable[
    [Any, ULView, ULMessageSource, ULMessageLevel, ULString, int, int, ULString], None
]


def ulViewSetAddConsoleMessageCallback(
    arg0: ULView,
    arg1: ULAddConsoleMessageCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetAddConsoleMessageCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULCreateChildViewCallback: TypeAlias = Callable[
    [Any, ULView, ULString, ULString, bool, ULIntRect], ULView
]


def ulViewSetCreateChildViewCallback(
    arg0: ULView,
    arg1: ULCreateChildViewCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetCreateChildViewCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULCreateInspectorViewCallback: TypeAlias = Callable[
    [Any, ULView, bool, ULString], ULView
]


def ulViewSetCreateInspectorViewCallback(
    arg0: ULView,
    arg1: ULCreateInspectorViewCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetCreateInspectorViewCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULBeginLoadingCallback: TypeAlias = Callable[[Any, ULView, int, bool, ULString], None]


def ulViewSetBeginLoadingCallback(
    arg0: ULView,
    arg1: ULBeginLoadingCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetBeginLoadingCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULFinishLoadingCallback: TypeAlias = Callable[[Any, ULView, int, bool, ULString], None]


def ulViewSetFinishLoadingCallback(
    arg0: ULView,
    arg1: ULFinishLoadingCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetFinishLoadingCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULFailLoadingCallback: TypeAlias = Callable[
    [Any, ULView, int, bool, ULString, ULString, ULString, int], None
]


def ulViewSetFailLoadingCallback(
    arg0: ULView,
    arg1: ULFailLoadingCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetFailLoadingCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULWindowObjectReadyCallback: TypeAlias = Callable[
    [Any, ULView, int, bool, ULString], None
]


def ulViewSetWindowObjectReadyCallback(
    arg0: ULView,
    arg1: ULWindowObjectReadyCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetWindowObjectReadyCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULDOMReadyCallback: TypeAlias = Callable[[Any, ULView, int, bool, ULString], None]


def ulViewSetDOMReadyCallback(
    arg0: ULView,
    arg1: ULDOMReadyCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetDOMReadyCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULUpdateHistoryCallback: TypeAlias = Callable[[Any, ULView], None]


def ulViewSetUpdateHistoryCallback(
    arg0: ULView,
    arg1: ULUpdateHistoryCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetUpdateHistoryCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulViewSetNeedsPaint(
    arg0: ULView,
    arg1: bool,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewSetNeedsPaint(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulViewGetNeedsPaint(
    arg0: ULView,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewGetNeedsPaint(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulViewCreateLocalInspectorView(
    arg0: ULView,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulViewCreateLocalInspectorView(  # type: ignore[attr-defined]
            arg0,
        )
    )


class C_Settings: ...


ULSettings: TypeAlias = Pointer[C_Settings]


class C_App: ...


ULApp: TypeAlias = Pointer[C_App]


class C_Window: ...


ULWindow: TypeAlias = Pointer[C_Window]


class C_Monitor: ...


ULMonitor: TypeAlias = Pointer[C_Monitor]


class C_Overlay: ...


ULOverlay: TypeAlias = Pointer[C_Overlay]


class ULWindowFlags(enum.IntEnum):
    kWindowFlags_Borderless = 1
    kWindowFlags_Titled = 2
    kWindowFlags_Resizable = 4
    kWindowFlags_Maximizable = 8
    kWindowFlags_Hidden = 16


kWindowFlags_Borderless = ULWindowFlags.kWindowFlags_Borderless
kWindowFlags_Titled = ULWindowFlags.kWindowFlags_Titled
kWindowFlags_Resizable = ULWindowFlags.kWindowFlags_Resizable
kWindowFlags_Maximizable = ULWindowFlags.kWindowFlags_Maximizable
kWindowFlags_Hidden = ULWindowFlags.kWindowFlags_Hidden


def ulCreateSettings() -> ULSettings:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateSettings()  # type: ignore[attr-defined]
    )


def ulDestroySettings(
    arg0: ULSettings,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroySettings(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulSettingsSetDeveloperName(
    arg0: ULSettings,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSettingsSetDeveloperName(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulSettingsSetAppName(
    arg0: ULSettings,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSettingsSetAppName(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulSettingsSetFileSystemPath(
    arg0: ULSettings,
    arg1: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSettingsSetFileSystemPath(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulSettingsSetLoadShadersFromFileSystem(
    arg0: ULSettings,
    arg1: bool,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSettingsSetLoadShadersFromFileSystem(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulSettingsSetForceCPURenderer(
    arg0: ULSettings,
    arg1: bool,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulSettingsSetForceCPURenderer(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulCreateApp(
    arg0: ULSettings,
    arg1: ULConfig,
    /,
) -> ULApp:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateApp(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulDestroyApp(
    arg0: ULApp,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyApp(  # type: ignore[attr-defined]
            arg0,
        )
    )


ULUpdateCallback: TypeAlias = Callable[[Any], None]


def ulAppSetUpdateCallback(
    arg0: ULApp,
    arg1: ULUpdateCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulAppSetUpdateCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulAppIsRunning(
    arg0: ULApp,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulAppIsRunning(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulAppGetMainMonitor(
    arg0: ULApp,
    /,
) -> ULMonitor:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulAppGetMainMonitor(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulAppGetRenderer(
    arg0: ULApp,
    /,
) -> ULRenderer:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulAppGetRenderer(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulAppRun(
    arg0: ULApp,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulAppRun(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulAppQuit(
    arg0: ULApp,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulAppQuit(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulMonitorGetScale(
    arg0: ULMonitor,
    /,
) -> float:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulMonitorGetScale(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulMonitorGetWidth(
    arg0: ULMonitor,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulMonitorGetWidth(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulMonitorGetHeight(
    arg0: ULMonitor,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulMonitorGetHeight(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulCreateWindow(
    arg0: ULMonitor,
    arg1: int,
    arg2: int,
    arg3: bool,
    arg4: int,
    /,
) -> ULWindow:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateWindow(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
        )
    )


def ulDestroyWindow(
    arg0: ULWindow,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyWindow(  # type: ignore[attr-defined]
            arg0,
        )
    )


ULCloseCallback: TypeAlias = Callable[[Any, ULWindow], None]


def ulWindowSetCloseCallback(
    arg0: ULWindow,
    arg1: ULCloseCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowSetCloseCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


ULResizeCallback: TypeAlias = Callable[[Any, ULWindow, int, int], None]


def ulWindowSetResizeCallback(
    arg0: ULWindow,
    arg1: ULResizeCallback,
    arg2: Any,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowSetResizeCallback(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulWindowGetScreenWidth(
    arg0: ULWindow,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowGetScreenWidth(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowGetWidth(
    arg0: ULWindow,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowGetWidth(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowGetScreenHeight(
    arg0: ULWindow,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowGetScreenHeight(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowGetHeight(
    arg0: ULWindow,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowGetHeight(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowMoveTo(
    arg0: ULWindow,
    arg1: int,
    arg2: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowMoveTo(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulWindowMoveToCenter(
    arg0: ULWindow,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowMoveToCenter(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowGetPositionX(
    arg0: ULWindow,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowGetPositionX(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowGetPositionY(
    arg0: ULWindow,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowGetPositionY(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowIsFullscreen(
    arg0: ULWindow,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowIsFullscreen(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowGetScale(
    arg0: ULWindow,
    /,
) -> float:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowGetScale(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowSetTitle(
    arg0: ULWindow,
    arg1: bytes,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowSetTitle(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulWindowSetCursor(
    arg0: ULWindow,
    arg1: ULCursor,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowSetCursor(  # type: ignore[attr-defined]
            arg0,
            arg1.value,
        )
    )


def ulWindowShow(
    arg0: ULWindow,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowShow(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowHide(
    arg0: ULWindow,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowHide(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowIsVisible(
    arg0: ULWindow,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowIsVisible(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowClose(
    arg0: ULWindow,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowClose(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulWindowScreenToPixels(
    arg0: ULWindow,
    arg1: int,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowScreenToPixels(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulWindowPixelsToScreen(
    arg0: ULWindow,
    arg1: int,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulWindowPixelsToScreen(  # type: ignore[attr-defined]
            arg0,
            arg1,
        )
    )


def ulWindowGetNativeHandle(
    arg0: ULWindow,
    /,
) -> Any:
    return _base.get_lib().ulWindowGetNativeHandle(  # type: ignore[attr-defined]
        arg0,
    )


def ulCreateOverlay(
    arg0: ULWindow,
    arg1: int,
    arg2: int,
    arg3: int,
    arg4: int,
    /,
) -> ULOverlay:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateOverlay(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
        )
    )


def ulCreateOverlayWithView(
    arg0: ULWindow,
    arg1: ULView,
    arg2: int,
    arg3: int,
    /,
) -> ULOverlay:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulCreateOverlayWithView(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
            arg3,
        )
    )


def ulDestroyOverlay(
    arg0: ULOverlay,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulDestroyOverlay(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulOverlayGetView(
    arg0: ULOverlay,
    /,
) -> ULView:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayGetView(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulOverlayGetWidth(
    arg0: ULOverlay,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayGetWidth(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulOverlayGetHeight(
    arg0: ULOverlay,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayGetHeight(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulOverlayGetX(
    arg0: ULOverlay,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayGetX(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulOverlayGetY(
    arg0: ULOverlay,
    /,
) -> int:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayGetY(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulOverlayMoveTo(
    arg0: ULOverlay,
    arg1: int,
    arg2: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayMoveTo(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulOverlayResize(
    arg0: ULOverlay,
    arg1: int,
    arg2: int,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayResize(  # type: ignore[attr-defined]
            arg0,
            arg1,
            arg2,
        )
    )


def ulOverlayIsHidden(
    arg0: ULOverlay,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayIsHidden(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulOverlayHide(
    arg0: ULOverlay,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayHide(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulOverlayShow(
    arg0: ULOverlay,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayShow(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulOverlayHasFocus(
    arg0: ULOverlay,
    /,
) -> bool:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayHasFocus(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulOverlayFocus(
    arg0: ULOverlay,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayFocus(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulOverlayUnfocus(
    arg0: ULOverlay,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulOverlayUnfocus(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulEnablePlatformFontLoader() -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulEnablePlatformFontLoader()  # type: ignore[attr-defined]
    )


def ulEnablePlatformFileSystem(
    arg0: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulEnablePlatformFileSystem(  # type: ignore[attr-defined]
            arg0,
        )
    )


def ulEnableDefaultLogger(
    arg0: ULString,
    /,
) -> None:
    return (  # type: ignore[no-any-return]
        _base.get_lib().ulEnableDefaultLogger(  # type: ignore[attr-defined]
            arg0,
        )
    )
