"""
WARNING: This file is generated automatically by ``scripts/_build.py``.
Do not edit this file by hand!
"""

import enum
from collections.abc import Callable
from typing import Any
from typing import Generic
from typing import TypeAlias
from typing import TypeVar

_T = TypeVar('_T')

class Pointer(Generic[_T]): ...

# primitive type: typedef ptrdiff_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef size_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef wchar_t; <class 'cffi.model.PrimitiveType'>; alias: None

# anonymous struct: anonymous max_align_t; alias: max_align_t

class max_align_t:
    __max_align_ll: int
    __max_align_ld: float

# primitive type: typedef __u_char; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __u_short; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __u_int; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __u_long; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __int8_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __uint8_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __int16_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __uint16_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __int32_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __uint32_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __int64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __uint64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __int_least8_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __uint_least8_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __int_least16_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __uint_least16_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __int_least32_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __uint_least32_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __int_least64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __uint_least64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __quad_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __u_quad_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __intmax_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __uintmax_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __dev_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __uid_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __gid_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __ino_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __ino64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __mode_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __nlink_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __off_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __off64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __pid_t; <class 'cffi.model.PrimitiveType'>; alias: None

# anonymous struct: anonymous __fsid_t; alias: __fsid_t

class __fsid_t:
    __val: Pointer[int]

# primitive type: typedef __clock_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __rlim_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __rlim64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __id_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __time_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __useconds_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __suseconds_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __suseconds64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __daddr_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __key_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __clockid_t; <class 'cffi.model.PrimitiveType'>; alias: None

__timer_t: TypeAlias = Pointer[None]
# primitive type: typedef __blksize_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __blkcnt_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __blkcnt64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __fsblkcnt_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __fsblkcnt64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __fsfilcnt_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __fsfilcnt64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __fsword_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __ssize_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __syscall_slong_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __syscall_ulong_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __loff_t; <class 'cffi.model.PrimitiveType'>; alias: None

__caddr_t: TypeAlias = Pointer[bytes]
# primitive type: typedef __intptr_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __socklen_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef __sig_atomic_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int8_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int16_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int32_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint8_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint16_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint32_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int_least8_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int_least16_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int_least32_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int_least64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint_least8_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint_least16_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint_least32_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint_least64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int_fast8_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int_fast16_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int_fast32_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef int_fast64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint_fast8_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint_fast16_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint_fast32_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uint_fast64_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef intptr_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uintptr_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef intmax_t; <class 'cffi.model.PrimitiveType'>; alias: None

# primitive type: typedef uintmax_t; <class 'cffi.model.PrimitiveType'>; alias: None

class OpaqueJSContextGroup: ...

JSContextGroupRef: TypeAlias = Pointer[OpaqueJSContextGroup]

class OpaqueJSContext: ...

JSContextRef: TypeAlias = Pointer[OpaqueJSContext]
JSGlobalContextRef: TypeAlias = Pointer[OpaqueJSContext]

class OpaqueJSString: ...

JSStringRef: TypeAlias = Pointer[OpaqueJSString]

class OpaqueJSClass: ...

JSClassRef: TypeAlias = Pointer[OpaqueJSClass]

class OpaqueJSPropertyNameArray: ...

JSPropertyNameArrayRef: TypeAlias = Pointer[OpaqueJSPropertyNameArray]

class OpaqueJSPropertyNameAccumulator: ...

JSPropertyNameAccumulatorRef: TypeAlias = Pointer[OpaqueJSPropertyNameAccumulator]
JSTypedArrayBytesDeallocator: TypeAlias = Callable[[Pointer[Any], Pointer[Any]], None]

class OpaqueJSValue: ...

JSValueRef: TypeAlias = Pointer[OpaqueJSValue]
JSObjectRef: TypeAlias = Pointer[OpaqueJSValue]

def JSEvaluateScript(
    arg0: JSContextRef,
    arg1: JSStringRef,
    arg2: JSObjectRef,
    arg3: JSStringRef,
    arg4: int,
    arg5: Pointer[JSValueRef],
    /,
) -> JSValueRef: ...
def JSCheckScriptSyntax(
    arg0: JSContextRef,
    arg1: JSStringRef,
    arg2: JSStringRef,
    arg3: int,
    arg4: Pointer[JSValueRef],
    /,
) -> bool: ...
def JSGarbageCollect(
    arg0: JSContextRef,
    /,
) -> None: ...

# anonymous enum: anonymous JSType; alias: JSType

class JSType(enum.IntEnum):
    kJSTypeUndefined = 0
    kJSTypeNull = 1
    kJSTypeBoolean = 2
    kJSTypeNumber = 3
    kJSTypeString = 4
    kJSTypeObject = 5
    kJSTypeSymbol = 6

kJSTypeUndefined = JSType.kJSTypeUndefined
kJSTypeNull = JSType.kJSTypeNull
kJSTypeBoolean = JSType.kJSTypeBoolean
kJSTypeNumber = JSType.kJSTypeNumber
kJSTypeString = JSType.kJSTypeString
kJSTypeObject = JSType.kJSTypeObject
kJSTypeSymbol = JSType.kJSTypeSymbol

# anonymous enum: anonymous JSTypedArrayType; alias: JSTypedArrayType

class JSTypedArrayType(enum.IntEnum):
    kJSTypedArrayTypeInt8Array = 0
    kJSTypedArrayTypeInt16Array = 1
    kJSTypedArrayTypeInt32Array = 2
    kJSTypedArrayTypeUint8Array = 3
    kJSTypedArrayTypeUint8ClampedArray = 4
    kJSTypedArrayTypeUint16Array = 5
    kJSTypedArrayTypeUint32Array = 6
    kJSTypedArrayTypeFloat32Array = 7
    kJSTypedArrayTypeFloat64Array = 8
    kJSTypedArrayTypeArrayBuffer = 9
    kJSTypedArrayTypeNone = 10
    kJSTypedArrayTypeBigInt64Array = 11
    kJSTypedArrayTypeBigUint64Array = 12

kJSTypedArrayTypeInt8Array = JSTypedArrayType.kJSTypedArrayTypeInt8Array
kJSTypedArrayTypeInt16Array = JSTypedArrayType.kJSTypedArrayTypeInt16Array
kJSTypedArrayTypeInt32Array = JSTypedArrayType.kJSTypedArrayTypeInt32Array
kJSTypedArrayTypeUint8Array = JSTypedArrayType.kJSTypedArrayTypeUint8Array
kJSTypedArrayTypeUint8ClampedArray = JSTypedArrayType.kJSTypedArrayTypeUint8ClampedArray
kJSTypedArrayTypeUint16Array = JSTypedArrayType.kJSTypedArrayTypeUint16Array
kJSTypedArrayTypeUint32Array = JSTypedArrayType.kJSTypedArrayTypeUint32Array
kJSTypedArrayTypeFloat32Array = JSTypedArrayType.kJSTypedArrayTypeFloat32Array
kJSTypedArrayTypeFloat64Array = JSTypedArrayType.kJSTypedArrayTypeFloat64Array
kJSTypedArrayTypeArrayBuffer = JSTypedArrayType.kJSTypedArrayTypeArrayBuffer
kJSTypedArrayTypeNone = JSTypedArrayType.kJSTypedArrayTypeNone
kJSTypedArrayTypeBigInt64Array = JSTypedArrayType.kJSTypedArrayTypeBigInt64Array
kJSTypedArrayTypeBigUint64Array = JSTypedArrayType.kJSTypedArrayTypeBigUint64Array

def JSValueGetType(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> JSType: ...
def JSValueIsUndefined(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool: ...
def JSValueIsNull(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool: ...
def JSValueIsBoolean(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool: ...
def JSValueIsNumber(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool: ...
def JSValueIsString(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool: ...
def JSValueIsSymbol(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool: ...
def JSValueIsObject(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool: ...
def JSValueIsObjectOfClass(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: JSClassRef,
    /,
) -> bool: ...
def JSValueIsArray(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool: ...
def JSValueIsDate(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool: ...
def JSValueGetTypedArrayType(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: Pointer[JSValueRef],
    /,
) -> JSTypedArrayType: ...
def JSValueIsEqual(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: JSValueRef,
    arg3: Pointer[JSValueRef],
    /,
) -> bool: ...
def JSValueIsStrictEqual(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: JSValueRef,
    /,
) -> bool: ...
def JSValueIsInstanceOfConstructor(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: JSObjectRef,
    arg3: Pointer[JSValueRef],
    /,
) -> bool: ...
def JSValueMakeUndefined(
    arg0: JSContextRef,
    /,
) -> JSValueRef: ...
def JSValueMakeNull(
    arg0: JSContextRef,
    /,
) -> JSValueRef: ...
def JSValueMakeBoolean(
    arg0: JSContextRef,
    arg1: bool,
    /,
) -> JSValueRef: ...
def JSValueMakeNumber(
    arg0: JSContextRef,
    arg1: float,
    /,
) -> JSValueRef: ...
def JSValueMakeString(
    arg0: JSContextRef,
    arg1: JSStringRef,
    /,
) -> JSValueRef: ...
def JSValueMakeSymbol(
    arg0: JSContextRef,
    arg1: JSStringRef,
    /,
) -> JSValueRef: ...
def JSValueMakeFromJSONString(
    arg0: JSContextRef,
    arg1: JSStringRef,
    /,
) -> JSValueRef: ...
def JSValueCreateJSONString(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: int,
    arg3: Pointer[JSValueRef],
    /,
) -> JSStringRef: ...
def JSValueToBoolean(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> bool: ...
def JSValueToNumber(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: Pointer[JSValueRef],
    /,
) -> float: ...
def JSValueToStringCopy(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: Pointer[JSValueRef],
    /,
) -> JSStringRef: ...
def JSValueToObject(
    arg0: JSContextRef,
    arg1: JSValueRef,
    arg2: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSValueProtect(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> None: ...
def JSValueUnprotect(
    arg0: JSContextRef,
    arg1: JSValueRef,
    /,
) -> None: ...

# anonymous enum: anonymous $enum_$1; alias: None

# primitive type: typedef JSPropertyAttributes; <class 'cffi.model.PrimitiveType'>; alias: None

# anonymous enum: anonymous $enum_$2; alias: None

# primitive type: typedef JSClassAttributes; <class 'cffi.model.PrimitiveType'>; alias: None

JSObjectInitializeCallback: TypeAlias = Callable[[JSContextRef, JSObjectRef], None]

JSObjectFinalizeCallback: TypeAlias = Callable[[JSObjectRef], None]

JSObjectHasPropertyCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSStringRef], bool
]

JSObjectGetPropertyCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSStringRef, Pointer[JSValueRef]], JSValueRef
]

JSObjectSetPropertyCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSStringRef, JSValueRef, Pointer[JSValueRef]], bool
]

JSObjectDeletePropertyCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSStringRef, Pointer[JSValueRef]], bool
]

JSObjectGetPropertyNamesCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSPropertyNameAccumulatorRef], None
]

JSObjectCallAsFunctionCallback: TypeAlias = Callable[
    [
        JSContextRef,
        JSObjectRef,
        JSObjectRef,
        int,
        Pointer[JSValueRef],
        Pointer[JSValueRef],
    ],
    JSValueRef,
]

JSObjectCallAsConstructorCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, int, Pointer[JSValueRef], Pointer[JSValueRef]],
    JSObjectRef,
]

JSObjectHasInstanceCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSValueRef, Pointer[JSValueRef]], bool
]

JSObjectConvertToTypeCallback: TypeAlias = Callable[
    [JSContextRef, JSObjectRef, JSType, Pointer[JSValueRef]], JSValueRef
]

# anonymous struct: anonymous JSStaticValue; alias: JSStaticValue

class JSStaticValue:
    name: Pointer[bytes]
    getProperty: JSObjectGetPropertyCallback
    setProperty: JSObjectSetPropertyCallback
    attributes: int

# anonymous struct: anonymous JSStaticFunction; alias: JSStaticFunction

class JSStaticFunction:
    name: Pointer[bytes]
    callAsFunction: JSObjectCallAsFunctionCallback
    attributes: int

# anonymous struct: anonymous JSClassDefinition; alias: JSClassDefinition

class JSClassDefinition:
    version: int
    attributes: int
    className: Pointer[bytes]
    parentClass: JSClassRef
    staticValues: Pointer[JSStaticValue]
    staticFunctions: Pointer[JSStaticFunction]
    initialize: JSObjectInitializeCallback
    finalize: JSObjectFinalizeCallback
    hasProperty: JSObjectHasPropertyCallback
    getProperty: JSObjectGetPropertyCallback
    setProperty: JSObjectSetPropertyCallback
    deleteProperty: JSObjectDeletePropertyCallback
    getPropertyNames: JSObjectGetPropertyNamesCallback
    callAsFunction: JSObjectCallAsFunctionCallback
    callAsConstructor: JSObjectCallAsConstructorCallback
    hasInstance: JSObjectHasInstanceCallback
    convertToType: JSObjectConvertToTypeCallback

# constant: constant kJSClassDefinitionEmpty

def JSClassCreate(
    arg0: Pointer[JSClassDefinition],
    /,
) -> JSClassRef: ...
def JSClassRetain(
    arg0: JSClassRef,
    /,
) -> JSClassRef: ...
def JSClassRelease(
    arg0: JSClassRef,
    /,
) -> None: ...
def JSObjectMake(
    arg0: JSContextRef,
    arg1: JSClassRef,
    arg2: Pointer[Any],
    /,
) -> JSObjectRef: ...
def JSObjectMakeFunctionWithCallback(
    arg0: JSContextRef,
    arg1: JSStringRef,
    arg2: JSObjectCallAsFunctionCallback,
    /,
) -> JSObjectRef: ...
def JSObjectMakeConstructor(
    arg0: JSContextRef,
    arg1: JSClassRef,
    arg2: JSObjectCallAsConstructorCallback,
    /,
) -> JSObjectRef: ...
def JSObjectMakeArray(
    arg0: JSContextRef,
    arg1: int,
    arg2: Pointer[JSValueRef],
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectMakeDate(
    arg0: JSContextRef,
    arg1: int,
    arg2: Pointer[JSValueRef],
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectMakeError(
    arg0: JSContextRef,
    arg1: int,
    arg2: Pointer[JSValueRef],
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectMakeRegExp(
    arg0: JSContextRef,
    arg1: int,
    arg2: Pointer[JSValueRef],
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectMakeDeferredPromise(
    arg0: JSContextRef,
    arg1: Pointer[JSObjectRef],
    arg2: Pointer[JSObjectRef],
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectMakeFunction(
    arg0: JSContextRef,
    arg1: JSStringRef,
    arg2: int,
    arg3: Pointer[JSStringRef],
    arg4: JSStringRef,
    arg5: JSStringRef,
    arg6: int,
    arg7: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectGetPrototype(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    /,
) -> JSValueRef: ...
def JSObjectSetPrototype(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSValueRef,
    /,
) -> None: ...
def JSObjectHasProperty(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSStringRef,
    /,
) -> bool: ...
def JSObjectGetProperty(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSStringRef,
    arg3: Pointer[JSValueRef],
    /,
) -> JSValueRef: ...
def JSObjectSetProperty(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSStringRef,
    arg3: JSValueRef,
    arg4: int,
    arg5: Pointer[JSValueRef],
    /,
) -> None: ...
def JSObjectDeleteProperty(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSStringRef,
    arg3: Pointer[JSValueRef],
    /,
) -> bool: ...
def JSObjectHasPropertyForKey(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSValueRef,
    arg3: Pointer[JSValueRef],
    /,
) -> bool: ...
def JSObjectGetPropertyForKey(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSValueRef,
    arg3: Pointer[JSValueRef],
    /,
) -> JSValueRef: ...
def JSObjectSetPropertyForKey(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSValueRef,
    arg3: JSValueRef,
    arg4: int,
    arg5: Pointer[JSValueRef],
    /,
) -> None: ...
def JSObjectDeletePropertyForKey(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSValueRef,
    arg3: Pointer[JSValueRef],
    /,
) -> bool: ...
def JSObjectGetPropertyAtIndex(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: int,
    arg3: Pointer[JSValueRef],
    /,
) -> JSValueRef: ...
def JSObjectSetPropertyAtIndex(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: int,
    arg3: JSValueRef,
    arg4: Pointer[JSValueRef],
    /,
) -> None: ...
def JSObjectGetPrivate(
    arg0: JSObjectRef,
    /,
) -> Pointer[Any]: ...
def JSObjectSetPrivate(
    arg0: JSObjectRef,
    arg1: Pointer[Any],
    /,
) -> bool: ...
def JSObjectIsFunction(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    /,
) -> bool: ...
def JSObjectCallAsFunction(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: JSObjectRef,
    arg3: int,
    arg4: Pointer[JSValueRef],
    arg5: Pointer[JSValueRef],
    /,
) -> JSValueRef: ...
def JSObjectIsConstructor(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    /,
) -> bool: ...
def JSObjectCallAsConstructor(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: int,
    arg3: Pointer[JSValueRef],
    arg4: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectCopyPropertyNames(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    /,
) -> JSPropertyNameArrayRef: ...
def JSPropertyNameArrayRetain(
    arg0: JSPropertyNameArrayRef,
    /,
) -> JSPropertyNameArrayRef: ...
def JSPropertyNameArrayRelease(
    arg0: JSPropertyNameArrayRef,
    /,
) -> None: ...
def JSPropertyNameArrayGetCount(
    arg0: JSPropertyNameArrayRef,
    /,
) -> int: ...
def JSPropertyNameArrayGetNameAtIndex(
    arg0: JSPropertyNameArrayRef,
    arg1: int,
    /,
) -> JSStringRef: ...
def JSPropertyNameAccumulatorAddName(
    arg0: JSPropertyNameAccumulatorRef,
    arg1: JSStringRef,
    /,
) -> None: ...
def JSContextGroupCreate() -> JSContextGroupRef: ...
def JSContextGroupRetain(
    arg0: JSContextGroupRef,
    /,
) -> JSContextGroupRef: ...
def JSContextGroupRelease(
    arg0: JSContextGroupRef,
    /,
) -> None: ...
def JSGlobalContextCreate(
    arg0: JSClassRef,
    /,
) -> JSGlobalContextRef: ...
def JSGlobalContextCreateInGroup(
    arg0: JSContextGroupRef,
    arg1: JSClassRef,
    /,
) -> JSGlobalContextRef: ...
def JSGlobalContextRetain(
    arg0: JSGlobalContextRef,
    /,
) -> JSGlobalContextRef: ...
def JSGlobalContextRelease(
    arg0: JSGlobalContextRef,
    /,
) -> None: ...
def JSContextGetGlobalObject(
    arg0: JSContextRef,
    /,
) -> JSObjectRef: ...
def JSContextGetGroup(
    arg0: JSContextRef,
    /,
) -> JSContextGroupRef: ...
def JSContextGetGlobalContext(
    arg0: JSContextRef,
    /,
) -> JSGlobalContextRef: ...
def JSGlobalContextCopyName(
    arg0: JSGlobalContextRef,
    /,
) -> JSStringRef: ...
def JSGlobalContextSetName(
    arg0: JSGlobalContextRef,
    arg1: JSStringRef,
    /,
) -> None: ...
def JSGlobalContextIsInspectable(
    arg0: JSGlobalContextRef,
    /,
) -> bool: ...
def JSGlobalContextSetInspectable(
    arg0: JSGlobalContextRef,
    arg1: bool,
    /,
) -> None: ...

# primitive type: typedef JSChar; <class 'cffi.model.PrimitiveType'>; alias: None

def JSStringCreateWithCharacters(
    arg0: Pointer[int],
    arg1: int,
    /,
) -> JSStringRef: ...
def JSStringCreateWithUTF8CString(
    arg0: Pointer[bytes],
    /,
) -> JSStringRef: ...
def JSStringRetain(
    arg0: JSStringRef,
    /,
) -> JSStringRef: ...
def JSStringRelease(
    arg0: JSStringRef,
    /,
) -> None: ...
def JSStringGetLength(
    arg0: JSStringRef,
    /,
) -> int: ...
def JSStringGetCharactersPtr(
    arg0: JSStringRef,
    /,
) -> Pointer[int]: ...
def JSStringGetMaximumUTF8CStringSize(
    arg0: JSStringRef,
    /,
) -> int: ...
def JSStringGetUTF8CString(
    arg0: JSStringRef,
    arg1: Pointer[bytes],
    arg2: int,
    /,
) -> int: ...
def JSStringIsEqual(
    arg0: JSStringRef,
    arg1: JSStringRef,
    /,
) -> bool: ...
def JSStringIsEqualToUTF8CString(
    arg0: JSStringRef,
    arg1: Pointer[bytes],
    /,
) -> bool: ...
def JSObjectMakeTypedArray(
    arg0: JSContextRef,
    arg1: JSTypedArrayType,
    arg2: int,
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectMakeTypedArrayWithBytesNoCopy(
    arg0: JSContextRef,
    arg1: JSTypedArrayType,
    arg2: Pointer[Any],
    arg3: int,
    arg4: JSTypedArrayBytesDeallocator,
    arg5: Pointer[Any],
    arg6: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectMakeTypedArrayWithArrayBuffer(
    arg0: JSContextRef,
    arg1: JSTypedArrayType,
    arg2: JSObjectRef,
    arg3: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectMakeTypedArrayWithArrayBufferAndOffset(
    arg0: JSContextRef,
    arg1: JSTypedArrayType,
    arg2: JSObjectRef,
    arg3: int,
    arg4: int,
    arg5: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectGetTypedArrayBytesPtr(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> Pointer[Any]: ...
def JSObjectGetTypedArrayLength(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> int: ...
def JSObjectGetTypedArrayByteLength(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> int: ...
def JSObjectGetTypedArrayByteOffset(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> int: ...
def JSObjectGetTypedArrayBuffer(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectMakeArrayBufferWithBytesNoCopy(
    arg0: JSContextRef,
    arg1: Pointer[Any],
    arg2: int,
    arg3: JSTypedArrayBytesDeallocator,
    arg4: Pointer[Any],
    arg5: Pointer[JSValueRef],
    /,
) -> JSObjectRef: ...
def JSObjectGetArrayBufferBytesPtr(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> Pointer[Any]: ...
def JSObjectGetArrayBufferByteLength(
    arg0: JSContextRef,
    arg1: JSObjectRef,
    arg2: Pointer[JSValueRef],
    /,
) -> int: ...

# primitive type: typedef ULChar16; <class 'cffi.model.PrimitiveType'>; alias: None

class C_Config: ...

ULConfig: TypeAlias = Pointer[C_Config]

class C_Renderer: ...

ULRenderer: TypeAlias = Pointer[C_Renderer]

class C_Session: ...

ULSession: TypeAlias = Pointer[C_Session]

class C_ViewConfig: ...

ULViewConfig: TypeAlias = Pointer[C_ViewConfig]

class C_View: ...

ULView: TypeAlias = Pointer[C_View]

class C_Bitmap: ...

ULBitmap: TypeAlias = Pointer[C_Bitmap]

class C_String: ...

ULString: TypeAlias = Pointer[C_String]

class C_Buffer: ...

ULBuffer: TypeAlias = Pointer[C_Buffer]

class C_KeyEvent: ...

ULKeyEvent: TypeAlias = Pointer[C_KeyEvent]

class C_MouseEvent: ...

ULMouseEvent: TypeAlias = Pointer[C_MouseEvent]

class C_ScrollEvent: ...

ULScrollEvent: TypeAlias = Pointer[C_ScrollEvent]

class C_GamepadEvent: ...

ULGamepadEvent: TypeAlias = Pointer[C_GamepadEvent]

class C_GamepadAxisEvent: ...

ULGamepadAxisEvent: TypeAlias = Pointer[C_GamepadAxisEvent]

class C_GamepadButtonEvent: ...

ULGamepadButtonEvent: TypeAlias = Pointer[C_GamepadButtonEvent]

class C_Surface: ...

ULSurface: TypeAlias = Pointer[C_Surface]
ULBitmapSurface: TypeAlias = Pointer[C_Surface]

class C_FontFile: ...

ULFontFile: TypeAlias = Pointer[C_FontFile]

class C_ImageSource: ...

ULImageSource: TypeAlias = Pointer[C_ImageSource]
# anonymous enum: anonymous ULMessageSource; alias: ULMessageSource

class ULMessageSource(enum.IntEnum):
    kMessageSource_XML = 0
    kMessageSource_JS = 1
    kMessageSource_Network = 2
    kMessageSource_ConsoleAPI = 3
    kMessageSource_Storage = 4
    kMessageSource_AppCache = 5
    kMessageSource_Rendering = 6
    kMessageSource_CSS = 7
    kMessageSource_Security = 8
    kMessageSource_ContentBlocker = 9
    kMessageSource_Media = 10
    kMessageSource_MediaSource = 11
    kMessageSource_WebRTC = 12
    kMessageSource_ITPDebug = 13
    kMessageSource_PrivateClickMeasurement = 14
    kMessageSource_PaymentRequest = 15
    kMessageSource_Other = 16

kMessageSource_XML = ULMessageSource.kMessageSource_XML
kMessageSource_JS = ULMessageSource.kMessageSource_JS
kMessageSource_Network = ULMessageSource.kMessageSource_Network
kMessageSource_ConsoleAPI = ULMessageSource.kMessageSource_ConsoleAPI
kMessageSource_Storage = ULMessageSource.kMessageSource_Storage
kMessageSource_AppCache = ULMessageSource.kMessageSource_AppCache
kMessageSource_Rendering = ULMessageSource.kMessageSource_Rendering
kMessageSource_CSS = ULMessageSource.kMessageSource_CSS
kMessageSource_Security = ULMessageSource.kMessageSource_Security
kMessageSource_ContentBlocker = ULMessageSource.kMessageSource_ContentBlocker
kMessageSource_Media = ULMessageSource.kMessageSource_Media
kMessageSource_MediaSource = ULMessageSource.kMessageSource_MediaSource
kMessageSource_WebRTC = ULMessageSource.kMessageSource_WebRTC
kMessageSource_ITPDebug = ULMessageSource.kMessageSource_ITPDebug
kMessageSource_PrivateClickMeasurement = (
    ULMessageSource.kMessageSource_PrivateClickMeasurement
)
kMessageSource_PaymentRequest = ULMessageSource.kMessageSource_PaymentRequest
kMessageSource_Other = ULMessageSource.kMessageSource_Other

# anonymous enum: anonymous ULMessageLevel; alias: ULMessageLevel

class ULMessageLevel(enum.IntEnum):
    kMessageLevel_Log = 0
    kMessageLevel_Warning = 1
    kMessageLevel_Error = 2
    kMessageLevel_Debug = 3
    kMessageLevel_Info = 4

kMessageLevel_Log = ULMessageLevel.kMessageLevel_Log
kMessageLevel_Warning = ULMessageLevel.kMessageLevel_Warning
kMessageLevel_Error = ULMessageLevel.kMessageLevel_Error
kMessageLevel_Debug = ULMessageLevel.kMessageLevel_Debug
kMessageLevel_Info = ULMessageLevel.kMessageLevel_Info

# anonymous enum: anonymous ULCursor; alias: ULCursor

class ULCursor(enum.IntEnum):
    kCursor_Pointer = 0
    kCursor_Cross = 1
    kCursor_Hand = 2
    kCursor_IBeam = 3
    kCursor_Wait = 4
    kCursor_Help = 5
    kCursor_EastResize = 6
    kCursor_NorthResize = 7
    kCursor_NorthEastResize = 8
    kCursor_NorthWestResize = 9
    kCursor_SouthResize = 10
    kCursor_SouthEastResize = 11
    kCursor_SouthWestResize = 12
    kCursor_WestResize = 13
    kCursor_NorthSouthResize = 14
    kCursor_EastWestResize = 15
    kCursor_NorthEastSouthWestResize = 16
    kCursor_NorthWestSouthEastResize = 17
    kCursor_ColumnResize = 18
    kCursor_RowResize = 19
    kCursor_MiddlePanning = 20
    kCursor_EastPanning = 21
    kCursor_NorthPanning = 22
    kCursor_NorthEastPanning = 23
    kCursor_NorthWestPanning = 24
    kCursor_SouthPanning = 25
    kCursor_SouthEastPanning = 26
    kCursor_SouthWestPanning = 27
    kCursor_WestPanning = 28
    kCursor_Move = 29
    kCursor_VerticalText = 30
    kCursor_Cell = 31
    kCursor_ContextMenu = 32
    kCursor_Alias = 33
    kCursor_Progress = 34
    kCursor_NoDrop = 35
    kCursor_Copy = 36
    kCursor_None = 37
    kCursor_NotAllowed = 38
    kCursor_ZoomIn = 39
    kCursor_ZoomOut = 40
    kCursor_Grab = 41
    kCursor_Grabbing = 42
    kCursor_Custom = 43

kCursor_Pointer = ULCursor.kCursor_Pointer
kCursor_Cross = ULCursor.kCursor_Cross
kCursor_Hand = ULCursor.kCursor_Hand
kCursor_IBeam = ULCursor.kCursor_IBeam
kCursor_Wait = ULCursor.kCursor_Wait
kCursor_Help = ULCursor.kCursor_Help
kCursor_EastResize = ULCursor.kCursor_EastResize
kCursor_NorthResize = ULCursor.kCursor_NorthResize
kCursor_NorthEastResize = ULCursor.kCursor_NorthEastResize
kCursor_NorthWestResize = ULCursor.kCursor_NorthWestResize
kCursor_SouthResize = ULCursor.kCursor_SouthResize
kCursor_SouthEastResize = ULCursor.kCursor_SouthEastResize
kCursor_SouthWestResize = ULCursor.kCursor_SouthWestResize
kCursor_WestResize = ULCursor.kCursor_WestResize
kCursor_NorthSouthResize = ULCursor.kCursor_NorthSouthResize
kCursor_EastWestResize = ULCursor.kCursor_EastWestResize
kCursor_NorthEastSouthWestResize = ULCursor.kCursor_NorthEastSouthWestResize
kCursor_NorthWestSouthEastResize = ULCursor.kCursor_NorthWestSouthEastResize
kCursor_ColumnResize = ULCursor.kCursor_ColumnResize
kCursor_RowResize = ULCursor.kCursor_RowResize
kCursor_MiddlePanning = ULCursor.kCursor_MiddlePanning
kCursor_EastPanning = ULCursor.kCursor_EastPanning
kCursor_NorthPanning = ULCursor.kCursor_NorthPanning
kCursor_NorthEastPanning = ULCursor.kCursor_NorthEastPanning
kCursor_NorthWestPanning = ULCursor.kCursor_NorthWestPanning
kCursor_SouthPanning = ULCursor.kCursor_SouthPanning
kCursor_SouthEastPanning = ULCursor.kCursor_SouthEastPanning
kCursor_SouthWestPanning = ULCursor.kCursor_SouthWestPanning
kCursor_WestPanning = ULCursor.kCursor_WestPanning
kCursor_Move = ULCursor.kCursor_Move
kCursor_VerticalText = ULCursor.kCursor_VerticalText
kCursor_Cell = ULCursor.kCursor_Cell
kCursor_ContextMenu = ULCursor.kCursor_ContextMenu
kCursor_Alias = ULCursor.kCursor_Alias
kCursor_Progress = ULCursor.kCursor_Progress
kCursor_NoDrop = ULCursor.kCursor_NoDrop
kCursor_Copy = ULCursor.kCursor_Copy
kCursor_None = ULCursor.kCursor_None
kCursor_NotAllowed = ULCursor.kCursor_NotAllowed
kCursor_ZoomIn = ULCursor.kCursor_ZoomIn
kCursor_ZoomOut = ULCursor.kCursor_ZoomOut
kCursor_Grab = ULCursor.kCursor_Grab
kCursor_Grabbing = ULCursor.kCursor_Grabbing
kCursor_Custom = ULCursor.kCursor_Custom

# anonymous enum: anonymous ULBitmapFormat; alias: ULBitmapFormat

class ULBitmapFormat(enum.IntEnum):
    kBitmapFormat_A8_UNORM = 0
    kBitmapFormat_BGRA8_UNORM_SRGB = 1

kBitmapFormat_A8_UNORM = ULBitmapFormat.kBitmapFormat_A8_UNORM
kBitmapFormat_BGRA8_UNORM_SRGB = ULBitmapFormat.kBitmapFormat_BGRA8_UNORM_SRGB

# anonymous enum: anonymous ULKeyEventType; alias: ULKeyEventType

class ULKeyEventType(enum.IntEnum):
    kKeyEventType_KeyDown = 0
    kKeyEventType_KeyUp = 1
    kKeyEventType_RawKeyDown = 2
    kKeyEventType_Char = 3

kKeyEventType_KeyDown = ULKeyEventType.kKeyEventType_KeyDown
kKeyEventType_KeyUp = ULKeyEventType.kKeyEventType_KeyUp
kKeyEventType_RawKeyDown = ULKeyEventType.kKeyEventType_RawKeyDown
kKeyEventType_Char = ULKeyEventType.kKeyEventType_Char

# anonymous enum: anonymous ULMouseEventType; alias: ULMouseEventType

class ULMouseEventType(enum.IntEnum):
    kMouseEventType_MouseMoved = 0
    kMouseEventType_MouseDown = 1
    kMouseEventType_MouseUp = 2

kMouseEventType_MouseMoved = ULMouseEventType.kMouseEventType_MouseMoved
kMouseEventType_MouseDown = ULMouseEventType.kMouseEventType_MouseDown
kMouseEventType_MouseUp = ULMouseEventType.kMouseEventType_MouseUp

# anonymous enum: anonymous ULMouseButton; alias: ULMouseButton

class ULMouseButton(enum.IntEnum):
    kMouseButton_None = 0
    kMouseButton_Left = 1
    kMouseButton_Middle = 2
    kMouseButton_Right = 3

kMouseButton_None = ULMouseButton.kMouseButton_None
kMouseButton_Left = ULMouseButton.kMouseButton_Left
kMouseButton_Middle = ULMouseButton.kMouseButton_Middle
kMouseButton_Right = ULMouseButton.kMouseButton_Right

# anonymous enum: anonymous ULScrollEventType; alias: ULScrollEventType

class ULScrollEventType(enum.IntEnum):
    kScrollEventType_ScrollByPixel = 0
    kScrollEventType_ScrollByPage = 1

kScrollEventType_ScrollByPixel = ULScrollEventType.kScrollEventType_ScrollByPixel
kScrollEventType_ScrollByPage = ULScrollEventType.kScrollEventType_ScrollByPage

# anonymous enum: anonymous ULGamepadEventType; alias: ULGamepadEventType

class ULGamepadEventType(enum.IntEnum):
    kGamepadEventType_Connected = 0
    kGamepadEventType_Disconnected = 1

kGamepadEventType_Connected = ULGamepadEventType.kGamepadEventType_Connected
kGamepadEventType_Disconnected = ULGamepadEventType.kGamepadEventType_Disconnected

# anonymous enum: anonymous ULFaceWinding; alias: ULFaceWinding

class ULFaceWinding(enum.IntEnum):
    kFaceWinding_Clockwise = 0
    kFaceWinding_CounterClockwise = 1

kFaceWinding_Clockwise = ULFaceWinding.kFaceWinding_Clockwise
kFaceWinding_CounterClockwise = ULFaceWinding.kFaceWinding_CounterClockwise

# anonymous enum: anonymous ULFontHinting; alias: ULFontHinting

class ULFontHinting(enum.IntEnum):
    kFontHinting_Smooth = 0
    kFontHinting_Normal = 1
    kFontHinting_Monochrome = 2

kFontHinting_Smooth = ULFontHinting.kFontHinting_Smooth
kFontHinting_Normal = ULFontHinting.kFontHinting_Normal
kFontHinting_Monochrome = ULFontHinting.kFontHinting_Monochrome

# anonymous struct: anonymous ULRect; alias: ULRect

class ULRect:
    left: float
    top: float
    right: float
    bottom: float

# anonymous struct: anonymous ULIntRect; alias: ULIntRect

class ULIntRect:
    left: int
    top: int
    right: int
    bottom: int

# anonymous struct: anonymous ULRenderTarget; alias: ULRenderTarget

class ULRenderTarget:
    is_empty: bool
    width: int
    height: int
    texture_id: int
    texture_width: int
    texture_height: int
    texture_format: ULBitmapFormat
    uv_coords: ULRect
    render_buffer_id: int

def ulVersionString() -> Pointer[bytes]: ...
def ulVersionMajor() -> int: ...
def ulVersionMinor() -> int: ...
def ulVersionPatch() -> int: ...
def ulWebKitVersionString() -> Pointer[bytes]: ...
def ulCreateEmptyBitmap() -> ULBitmap: ...
def ulCreateBitmap(
    arg0: int,
    arg1: int,
    arg2: ULBitmapFormat,
    /,
) -> ULBitmap: ...
def ulCreateBitmapFromPixels(
    arg0: int,
    arg1: int,
    arg2: ULBitmapFormat,
    arg3: int,
    arg4: Pointer[Any],
    arg5: int,
    arg6: bool,
    /,
) -> ULBitmap: ...
def ulCreateBitmapFromCopy(
    arg0: ULBitmap,
    /,
) -> ULBitmap: ...
def ulDestroyBitmap(
    arg0: ULBitmap,
    /,
) -> None: ...
def ulBitmapGetWidth(
    arg0: ULBitmap,
    /,
) -> int: ...
def ulBitmapGetHeight(
    arg0: ULBitmap,
    /,
) -> int: ...
def ulBitmapGetFormat(
    arg0: ULBitmap,
    /,
) -> ULBitmapFormat: ...
def ulBitmapGetBpp(
    arg0: ULBitmap,
    /,
) -> int: ...
def ulBitmapGetRowBytes(
    arg0: ULBitmap,
    /,
) -> int: ...
def ulBitmapGetSize(
    arg0: ULBitmap,
    /,
) -> int: ...
def ulBitmapOwnsPixels(
    arg0: ULBitmap,
    /,
) -> bool: ...
def ulBitmapLockPixels(
    arg0: ULBitmap,
    /,
) -> Pointer[Any]: ...
def ulBitmapUnlockPixels(
    arg0: ULBitmap,
    /,
) -> None: ...
def ulBitmapRawPixels(
    arg0: ULBitmap,
    /,
) -> Pointer[Any]: ...
def ulBitmapIsEmpty(
    arg0: ULBitmap,
    /,
) -> bool: ...
def ulBitmapErase(
    arg0: ULBitmap,
    /,
) -> None: ...
def ulBitmapWritePNG(
    arg0: ULBitmap,
    arg1: Pointer[bytes],
    /,
) -> bool: ...
def ulBitmapSwapRedBlueChannels(
    arg0: ULBitmap,
    /,
) -> None: ...

ulDestroyBufferCallback: TypeAlias = Callable[[Pointer[Any], Pointer[Any]], None]

def ulCreateBuffer(
    arg0: Pointer[Any],
    arg1: int,
    arg2: Pointer[Any],
    arg3: ulDestroyBufferCallback,
    /,
) -> ULBuffer: ...
def ulCreateBufferFromCopy(
    arg0: Pointer[Any],
    arg1: int,
    /,
) -> ULBuffer: ...
def ulDestroyBuffer(
    arg0: ULBuffer,
    /,
) -> None: ...
def ulBufferGetData(
    arg0: ULBuffer,
    /,
) -> Pointer[Any]: ...
def ulBufferGetSize(
    arg0: ULBuffer,
    /,
) -> int: ...
def ulBufferGetUserData(
    arg0: ULBuffer,
    /,
) -> Pointer[Any]: ...
def ulBufferOwnsData(
    arg0: ULBuffer,
    /,
) -> bool: ...

ULClipboardClearCallback: TypeAlias = Callable[[], None]

ULClipboardReadPlainTextCallback: TypeAlias = Callable[[ULString], None]

ULClipboardWritePlainTextCallback: TypeAlias = Callable[[ULString], None]

# anonymous struct: anonymous ULClipboard; alias: ULClipboard

class ULClipboard:
    clear: ULClipboardClearCallback
    read_plain_text: ULClipboardReadPlainTextCallback
    write_plain_text: ULClipboardWritePlainTextCallback

def ulCreateConfig() -> ULConfig: ...
def ulDestroyConfig(
    arg0: ULConfig,
    /,
) -> None: ...
def ulConfigSetCachePath(
    arg0: ULConfig,
    arg1: ULString,
    /,
) -> None: ...
def ulConfigSetResourcePathPrefix(
    arg0: ULConfig,
    arg1: ULString,
    /,
) -> None: ...
def ulConfigSetFaceWinding(
    arg0: ULConfig,
    arg1: ULFaceWinding,
    /,
) -> None: ...
def ulConfigSetFontHinting(
    arg0: ULConfig,
    arg1: ULFontHinting,
    /,
) -> None: ...
def ulConfigSetFontGamma(
    arg0: ULConfig,
    arg1: float,
    /,
) -> None: ...
def ulConfigSetUserStylesheet(
    arg0: ULConfig,
    arg1: ULString,
    /,
) -> None: ...
def ulConfigSetForceRepaint(
    arg0: ULConfig,
    arg1: bool,
    /,
) -> None: ...
def ulConfigSetAnimationTimerDelay(
    arg0: ULConfig,
    arg1: float,
    /,
) -> None: ...
def ulConfigSetScrollTimerDelay(
    arg0: ULConfig,
    arg1: float,
    /,
) -> None: ...
def ulConfigSetRecycleDelay(
    arg0: ULConfig,
    arg1: float,
    /,
) -> None: ...
def ulConfigSetMemoryCacheSize(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None: ...
def ulConfigSetPageCacheSize(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None: ...
def ulConfigSetOverrideRAMSize(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None: ...
def ulConfigSetMinLargeHeapSize(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None: ...
def ulConfigSetMinSmallHeapSize(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None: ...
def ulConfigSetNumRendererThreads(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None: ...
def ulConfigSetMaxUpdateTime(
    arg0: ULConfig,
    arg1: float,
    /,
) -> None: ...
def ulConfigSetBitmapAlignment(
    arg0: ULConfig,
    arg1: int,
    /,
) -> None: ...

ULFileSystemFileExistsCallback: TypeAlias = Callable[[ULString], bool]

ULFileSystemGetFileMimeTypeCallback: TypeAlias = Callable[[ULString], ULString]

ULFileSystemGetFileCharsetCallback: TypeAlias = Callable[[ULString], ULString]

ULFileSystemOpenFileCallback: TypeAlias = Callable[[ULString], ULBuffer]

# anonymous struct: anonymous ULFileSystem; alias: ULFileSystem

class ULFileSystem:
    file_exists: ULFileSystemFileExistsCallback
    get_file_mime_type: ULFileSystemGetFileMimeTypeCallback
    get_file_charset: ULFileSystemGetFileCharsetCallback
    open_file: ULFileSystemOpenFileCallback

def ulCreateString(
    arg0: Pointer[bytes],
    /,
) -> ULString: ...
def ulCreateStringUTF8(
    arg0: Pointer[bytes],
    arg1: int,
    /,
) -> ULString: ...
def ulCreateStringUTF16(
    arg0: Pointer[int],
    arg1: int,
    /,
) -> ULString: ...
def ulCreateStringFromCopy(
    arg0: ULString,
    /,
) -> ULString: ...
def ulDestroyString(
    arg0: ULString,
    /,
) -> None: ...
def ulStringGetData(
    arg0: ULString,
    /,
) -> Pointer[bytes]: ...
def ulStringGetLength(
    arg0: ULString,
    /,
) -> int: ...
def ulStringIsEmpty(
    arg0: ULString,
    /,
) -> bool: ...
def ulStringAssignString(
    arg0: ULString,
    arg1: ULString,
    /,
) -> None: ...
def ulStringAssignCString(
    arg0: ULString,
    arg1: Pointer[bytes],
    /,
) -> None: ...
def ulFontFileCreateFromFilePath(
    arg0: ULString,
    /,
) -> ULFontFile: ...
def ulFontFileCreateFromBuffer(
    arg0: ULBuffer,
    /,
) -> ULFontFile: ...
def ulDestroyFontFile(
    arg0: ULFontFile,
    /,
) -> None: ...

ULFontLoaderGetFallbackFont: TypeAlias = Callable[[], ULString]

ULFontLoaderGetFallbackFontForCharacters: TypeAlias = Callable[
    [ULString, int, bool], ULString
]

ULFontLoaderLoad: TypeAlias = Callable[[ULString, int, bool], ULFontFile]

# anonymous struct: anonymous ULFontLoader; alias: ULFontLoader

class ULFontLoader:
    get_fallback_font: ULFontLoaderGetFallbackFont
    get_fallback_font_for_characters: ULFontLoaderGetFallbackFontForCharacters
    load: ULFontLoaderLoad

def ulRectIsEmpty(
    arg0: ULRect,
    /,
) -> bool: ...
def ulRectMakeEmpty() -> ULRect: ...
def ulIntRectIsEmpty(
    arg0: ULIntRect,
    /,
) -> bool: ...
def ulIntRectMakeEmpty() -> ULIntRect: ...

# anonymous struct: anonymous ULRenderBuffer; alias: ULRenderBuffer

class ULRenderBuffer:
    texture_id: int
    width: int
    height: int
    has_stencil_buffer: bool
    has_depth_buffer: bool

# anonymous struct: anonymous ULVertex_2f_4ub_2f; alias: ULVertex_2f_4ub_2f

class ULVertex_2f_4ub_2f:
    pos: Pointer[float]
    color: Pointer[int]
    obj: Pointer[float]

# anonymous struct: anonymous ULVertex_2f_4ub_2f_2f_28f; alias: ULVertex_2f_4ub_2f_2f_28f

class ULVertex_2f_4ub_2f_2f_28f:
    pos: Pointer[float]
    color: Pointer[int]
    tex: Pointer[float]
    obj: Pointer[float]
    data0: Pointer[float]
    data1: Pointer[float]
    data2: Pointer[float]
    data3: Pointer[float]
    data4: Pointer[float]
    data5: Pointer[float]
    data6: Pointer[float]

# anonymous enum: anonymous ULVertexBufferFormat; alias: ULVertexBufferFormat

class ULVertexBufferFormat(enum.IntEnum):
    kVertexBufferFormat_2f_4ub_2f = 0
    kVertexBufferFormat_2f_4ub_2f_2f_28f = 1

kVertexBufferFormat_2f_4ub_2f = ULVertexBufferFormat.kVertexBufferFormat_2f_4ub_2f
kVertexBufferFormat_2f_4ub_2f_2f_28f = (
    ULVertexBufferFormat.kVertexBufferFormat_2f_4ub_2f_2f_28f
)

# anonymous struct: anonymous ULVertexBuffer; alias: ULVertexBuffer

class ULVertexBuffer:
    format: ULVertexBufferFormat
    size: int
    data: Pointer[int]

# primitive type: typedef ULIndexType; <class 'cffi.model.PrimitiveType'>; alias: None

# anonymous struct: anonymous ULIndexBuffer; alias: ULIndexBuffer

class ULIndexBuffer:
    size: int
    data: Pointer[int]

# anonymous enum: anonymous ULShaderType; alias: ULShaderType

class ULShaderType(enum.IntEnum):
    kShaderType_Fill = 0
    kShaderType_FillPath = 1

kShaderType_Fill = ULShaderType.kShaderType_Fill
kShaderType_FillPath = ULShaderType.kShaderType_FillPath

# anonymous struct: anonymous ULMatrix4x4; alias: ULMatrix4x4

class ULMatrix4x4:
    data: Pointer[float]

# anonymous struct: anonymous ULvec4; alias: ULvec4

class ULvec4:
    value: Pointer[float]

# anonymous struct: anonymous ULGPUState; alias: ULGPUState

class ULGPUState:
    viewport_width: int
    viewport_height: int
    transform: ULMatrix4x4
    enable_texturing: bool
    enable_blend: bool
    shader_type: int
    render_buffer_id: int
    texture_1_id: int
    texture_2_id: int
    texture_3_id: int
    uniform_scalar: Pointer[float]
    uniform_vector: Pointer[ULvec4]
    clip_size: int
    clip: Pointer[ULMatrix4x4]
    enable_scissor: bool
    scissor_rect: ULIntRect

# anonymous enum: anonymous ULCommandType; alias: ULCommandType

class ULCommandType(enum.IntEnum):
    kCommandType_ClearRenderBuffer = 0
    kCommandType_DrawGeometry = 1

kCommandType_ClearRenderBuffer = ULCommandType.kCommandType_ClearRenderBuffer
kCommandType_DrawGeometry = ULCommandType.kCommandType_DrawGeometry

# anonymous struct: anonymous ULCommand; alias: ULCommand

class ULCommand:
    command_type: int
    gpu_state: ULGPUState
    geometry_id: int
    indices_count: int
    indices_offset: int

# anonymous struct: anonymous ULCommandList; alias: ULCommandList

class ULCommandList:
    size: int
    commands: Pointer[ULCommand]

ULGPUDriverBeginSynchronizeCallback: TypeAlias = Callable[[], None]

ULGPUDriverEndSynchronizeCallback: TypeAlias = Callable[[], None]

ULGPUDriverNextTextureIdCallback: TypeAlias = Callable[[], int]

ULGPUDriverCreateTextureCallback: TypeAlias = Callable[[int, ULBitmap], None]

ULGPUDriverUpdateTextureCallback: TypeAlias = Callable[[int, ULBitmap], None]

ULGPUDriverDestroyTextureCallback: TypeAlias = Callable[[int], None]

ULGPUDriverNextRenderBufferIdCallback: TypeAlias = Callable[[], int]

ULGPUDriverCreateRenderBufferCallback: TypeAlias = Callable[[int, ULRenderBuffer], None]

ULGPUDriverDestroyRenderBufferCallback: TypeAlias = Callable[[int], None]

ULGPUDriverNextGeometryIdCallback: TypeAlias = Callable[[], int]

ULGPUDriverCreateGeometryCallback: TypeAlias = Callable[
    [int, ULVertexBuffer, ULIndexBuffer], None
]

ULGPUDriverUpdateGeometryCallback: TypeAlias = Callable[
    [int, ULVertexBuffer, ULIndexBuffer], None
]

ULGPUDriverDestroyGeometryCallback: TypeAlias = Callable[[int], None]

ULGPUDriverUpdateCommandListCallback: TypeAlias = Callable[[ULCommandList], None]

# anonymous struct: anonymous ULGPUDriver; alias: ULGPUDriver

class ULGPUDriver:
    begin_synchronize: ULGPUDriverBeginSynchronizeCallback
    end_synchronize: ULGPUDriverEndSynchronizeCallback
    next_texture_id: ULGPUDriverNextTextureIdCallback
    create_texture: ULGPUDriverCreateTextureCallback
    update_texture: ULGPUDriverUpdateTextureCallback
    destroy_texture: ULGPUDriverDestroyTextureCallback
    next_render_buffer_id: ULGPUDriverNextRenderBufferIdCallback
    create_render_buffer: ULGPUDriverCreateRenderBufferCallback
    destroy_render_buffer: ULGPUDriverDestroyRenderBufferCallback
    next_geometry_id: ULGPUDriverNextGeometryIdCallback
    create_geometry: ULGPUDriverCreateGeometryCallback
    update_geometry: ULGPUDriverUpdateGeometryCallback
    destroy_geometry: ULGPUDriverDestroyGeometryCallback
    update_command_list: ULGPUDriverUpdateCommandListCallback

def ulApplyProjection(
    arg0: ULMatrix4x4,
    arg1: float,
    arg2: float,
    arg3: bool,
    /,
) -> ULMatrix4x4: ...
def ulCreateImageSourceFromTexture(
    arg0: int,
    arg1: int,
    arg2: int,
    arg3: ULRect,
    arg4: ULBitmap,
    /,
) -> ULImageSource: ...
def ulCreateImageSourceFromBitmap(
    arg0: ULBitmap,
    /,
) -> ULImageSource: ...
def ulDestroyImageSource(
    arg0: ULImageSource,
    /,
) -> None: ...
def ulImageSourceInvalidate(
    arg0: ULImageSource,
    /,
) -> None: ...
def ulImageSourceProviderAddImageSource(
    arg0: ULString,
    arg1: ULImageSource,
    /,
) -> None: ...
def ulImageSourceProviderRemoveImageSource(
    arg0: ULString,
    /,
) -> None: ...
def ulCreateKeyEvent(
    arg0: ULKeyEventType,
    arg1: int,
    arg2: int,
    arg3: int,
    arg4: ULString,
    arg5: ULString,
    arg6: bool,
    arg7: bool,
    arg8: bool,
    /,
) -> ULKeyEvent: ...
def ulDestroyKeyEvent(
    arg0: ULKeyEvent,
    /,
) -> None: ...

# anonymous enum: anonymous ULLogLevel; alias: ULLogLevel

class ULLogLevel(enum.IntEnum):
    kLogLevel_Error = 0
    kLogLevel_Warning = 1
    kLogLevel_Info = 2

kLogLevel_Error = ULLogLevel.kLogLevel_Error
kLogLevel_Warning = ULLogLevel.kLogLevel_Warning
kLogLevel_Info = ULLogLevel.kLogLevel_Info

ULLoggerLogMessageCallback: TypeAlias = Callable[[ULLogLevel, ULString], None]

# anonymous struct: anonymous ULLogger; alias: ULLogger

class ULLogger:
    log_message: ULLoggerLogMessageCallback

def ulCreateMouseEvent(
    arg0: ULMouseEventType,
    arg1: int,
    arg2: int,
    arg3: ULMouseButton,
    /,
) -> ULMouseEvent: ...
def ulDestroyMouseEvent(
    arg0: ULMouseEvent,
    /,
) -> None: ...
def ulSurfaceGetWidth(
    arg0: ULSurface,
    /,
) -> int: ...
def ulSurfaceGetHeight(
    arg0: ULSurface,
    /,
) -> int: ...
def ulSurfaceGetRowBytes(
    arg0: ULSurface,
    /,
) -> int: ...
def ulSurfaceGetSize(
    arg0: ULSurface,
    /,
) -> int: ...
def ulSurfaceLockPixels(
    arg0: ULSurface,
    /,
) -> Pointer[Any]: ...
def ulSurfaceUnlockPixels(
    arg0: ULSurface,
    /,
) -> None: ...
def ulSurfaceResize(
    arg0: ULSurface,
    arg1: int,
    arg2: int,
    /,
) -> None: ...
def ulSurfaceSetDirtyBounds(
    arg0: ULSurface,
    arg1: ULIntRect,
    /,
) -> None: ...
def ulSurfaceGetDirtyBounds(
    arg0: ULSurface,
    /,
) -> ULIntRect: ...
def ulSurfaceClearDirtyBounds(
    arg0: ULSurface,
    /,
) -> None: ...
def ulSurfaceGetUserData(
    arg0: ULSurface,
    /,
) -> Pointer[Any]: ...
def ulBitmapSurfaceGetBitmap(
    arg0: ULBitmapSurface,
    /,
) -> ULBitmap: ...

ULSurfaceDefinitionCreateCallback: TypeAlias = Callable[[int, int], Pointer[Any]]

ULSurfaceDefinitionDestroyCallback: TypeAlias = Callable[[Pointer[Any]], None]

ULSurfaceDefinitionGetWidthCallback: TypeAlias = Callable[[Pointer[Any]], int]

ULSurfaceDefinitionGetHeightCallback: TypeAlias = Callable[[Pointer[Any]], int]

ULSurfaceDefinitionGetRowBytesCallback: TypeAlias = Callable[[Pointer[Any]], int]

ULSurfaceDefinitionGetSizeCallback: TypeAlias = Callable[[Pointer[Any]], int]

ULSurfaceDefinitionLockPixelsCallback: TypeAlias = Callable[
    [Pointer[Any]], Pointer[Any]
]

ULSurfaceDefinitionUnlockPixelsCallback: TypeAlias = Callable[[Pointer[Any]], None]

ULSurfaceDefinitionResizeCallback: TypeAlias = Callable[[Pointer[Any], int, int], None]

# anonymous struct: anonymous ULSurfaceDefinition; alias: ULSurfaceDefinition

class ULSurfaceDefinition:
    create: ULSurfaceDefinitionCreateCallback
    destroy: ULSurfaceDefinitionDestroyCallback
    get_width: ULSurfaceDefinitionGetWidthCallback
    get_height: ULSurfaceDefinitionGetHeightCallback
    get_row_bytes: ULSurfaceDefinitionGetRowBytesCallback
    get_size: ULSurfaceDefinitionGetSizeCallback
    lock_pixels: ULSurfaceDefinitionLockPixelsCallback
    unlock_pixels: ULSurfaceDefinitionUnlockPixelsCallback
    resize: ULSurfaceDefinitionResizeCallback

def ulPlatformSetLogger(
    arg0: ULLogger,
    /,
) -> None: ...
def ulPlatformSetFileSystem(
    arg0: ULFileSystem,
    /,
) -> None: ...
def ulPlatformSetFontLoader(
    arg0: ULFontLoader,
    /,
) -> None: ...
def ulPlatformSetSurfaceDefinition(
    arg0: ULSurfaceDefinition,
    /,
) -> None: ...
def ulPlatformSetGPUDriver(
    arg0: ULGPUDriver,
    /,
) -> None: ...
def ulPlatformSetClipboard(
    arg0: ULClipboard,
    /,
) -> None: ...
def ulCreateRenderer(
    arg0: ULConfig,
    /,
) -> ULRenderer: ...
def ulDestroyRenderer(
    arg0: ULRenderer,
    /,
) -> None: ...
def ulUpdate(
    arg0: ULRenderer,
    /,
) -> None: ...
def ulRefreshDisplay(
    arg0: ULRenderer,
    arg1: int,
    /,
) -> None: ...
def ulRender(
    arg0: ULRenderer,
    /,
) -> None: ...
def ulPurgeMemory(
    arg0: ULRenderer,
    /,
) -> None: ...
def ulLogMemoryUsage(
    arg0: ULRenderer,
    /,
) -> None: ...
def ulStartRemoteInspectorServer(
    arg0: ULRenderer,
    arg1: Pointer[bytes],
    arg2: int,
    /,
) -> bool: ...
def ulSetGamepadDetails(
    arg0: ULRenderer,
    arg1: int,
    arg2: ULString,
    arg3: int,
    arg4: int,
    /,
) -> None: ...
def ulFireGamepadEvent(
    arg0: ULRenderer,
    arg1: ULGamepadEvent,
    /,
) -> None: ...
def ulFireGamepadAxisEvent(
    arg0: ULRenderer,
    arg1: ULGamepadAxisEvent,
    /,
) -> None: ...
def ulFireGamepadButtonEvent(
    arg0: ULRenderer,
    arg1: ULGamepadButtonEvent,
    /,
) -> None: ...
def ulCreateScrollEvent(
    arg0: ULScrollEventType,
    arg1: int,
    arg2: int,
    /,
) -> ULScrollEvent: ...
def ulDestroyScrollEvent(
    arg0: ULScrollEvent,
    /,
) -> None: ...
def ulCreateGamepadEvent(
    arg0: int,
    arg1: ULGamepadEventType,
    /,
) -> ULGamepadEvent: ...
def ulDestroyGamepadEvent(
    arg0: ULGamepadEvent,
    /,
) -> None: ...
def ulCreateGamepadAxisEvent(
    arg0: int,
    arg1: int,
    arg2: float,
    /,
) -> ULGamepadAxisEvent: ...
def ulDestroyGamepadAxisEvent(
    arg0: ULGamepadAxisEvent,
    /,
) -> None: ...
def ulCreateGamepadButtonEvent(
    arg0: int,
    arg1: int,
    arg2: float,
    /,
) -> ULGamepadButtonEvent: ...
def ulDestroyGamepadButtonEvent(
    arg0: ULGamepadButtonEvent,
    /,
) -> None: ...
def ulCreateSession(
    arg0: ULRenderer,
    arg1: bool,
    arg2: ULString,
    /,
) -> ULSession: ...
def ulDestroySession(
    arg0: ULSession,
    /,
) -> None: ...
def ulDefaultSession(
    arg0: ULRenderer,
    /,
) -> ULSession: ...
def ulSessionIsPersistent(
    arg0: ULSession,
    /,
) -> bool: ...
def ulSessionGetName(
    arg0: ULSession,
    /,
) -> ULString: ...
def ulSessionGetId(
    arg0: ULSession,
    /,
) -> int: ...
def ulSessionGetDiskPath(
    arg0: ULSession,
    /,
) -> ULString: ...
def ulCreateViewConfig() -> ULViewConfig: ...
def ulDestroyViewConfig(
    arg0: ULViewConfig,
    /,
) -> None: ...
def ulViewConfigSetDisplayId(
    arg0: ULViewConfig,
    arg1: int,
    /,
) -> None: ...
def ulViewConfigSetIsAccelerated(
    arg0: ULViewConfig,
    arg1: bool,
    /,
) -> None: ...
def ulViewConfigSetIsTransparent(
    arg0: ULViewConfig,
    arg1: bool,
    /,
) -> None: ...
def ulViewConfigSetInitialDeviceScale(
    arg0: ULViewConfig,
    arg1: float,
    /,
) -> None: ...
def ulViewConfigSetInitialFocus(
    arg0: ULViewConfig,
    arg1: bool,
    /,
) -> None: ...
def ulViewConfigSetEnableImages(
    arg0: ULViewConfig,
    arg1: bool,
    /,
) -> None: ...
def ulViewConfigSetEnableJavaScript(
    arg0: ULViewConfig,
    arg1: bool,
    /,
) -> None: ...
def ulViewConfigSetFontFamilyStandard(
    arg0: ULViewConfig,
    arg1: ULString,
    /,
) -> None: ...
def ulViewConfigSetFontFamilyFixed(
    arg0: ULViewConfig,
    arg1: ULString,
    /,
) -> None: ...
def ulViewConfigSetFontFamilySerif(
    arg0: ULViewConfig,
    arg1: ULString,
    /,
) -> None: ...
def ulViewConfigSetFontFamilySansSerif(
    arg0: ULViewConfig,
    arg1: ULString,
    /,
) -> None: ...
def ulViewConfigSetUserAgent(
    arg0: ULViewConfig,
    arg1: ULString,
    /,
) -> None: ...
def ulCreateView(
    arg0: ULRenderer,
    arg1: int,
    arg2: int,
    arg3: ULViewConfig,
    arg4: ULSession,
    /,
) -> ULView: ...
def ulDestroyView(
    arg0: ULView,
    /,
) -> None: ...
def ulViewGetURL(
    arg0: ULView,
    /,
) -> ULString: ...
def ulViewGetTitle(
    arg0: ULView,
    /,
) -> ULString: ...
def ulViewGetWidth(
    arg0: ULView,
    /,
) -> int: ...
def ulViewGetHeight(
    arg0: ULView,
    /,
) -> int: ...
def ulViewGetDisplayId(
    arg0: ULView,
    /,
) -> int: ...
def ulViewSetDisplayId(
    arg0: ULView,
    arg1: int,
    /,
) -> None: ...
def ulViewGetDeviceScale(
    arg0: ULView,
    /,
) -> float: ...
def ulViewSetDeviceScale(
    arg0: ULView,
    arg1: float,
    /,
) -> None: ...
def ulViewIsAccelerated(
    arg0: ULView,
    /,
) -> bool: ...
def ulViewIsTransparent(
    arg0: ULView,
    /,
) -> bool: ...
def ulViewIsLoading(
    arg0: ULView,
    /,
) -> bool: ...
def ulViewGetRenderTarget(
    arg0: ULView,
    /,
) -> ULRenderTarget: ...
def ulViewGetSurface(
    arg0: ULView,
    /,
) -> ULSurface: ...
def ulViewLoadHTML(
    arg0: ULView,
    arg1: ULString,
    /,
) -> None: ...
def ulViewLoadURL(
    arg0: ULView,
    arg1: ULString,
    /,
) -> None: ...
def ulViewResize(
    arg0: ULView,
    arg1: int,
    arg2: int,
    /,
) -> None: ...
def ulViewLockJSContext(
    arg0: ULView,
    /,
) -> JSContextRef: ...
def ulViewUnlockJSContext(
    arg0: ULView,
    /,
) -> None: ...
def ulViewEvaluateScript(
    arg0: ULView,
    arg1: ULString,
    arg2: Pointer[ULString],
    /,
) -> ULString: ...
def ulViewCanGoBack(
    arg0: ULView,
    /,
) -> bool: ...
def ulViewCanGoForward(
    arg0: ULView,
    /,
) -> bool: ...
def ulViewGoBack(
    arg0: ULView,
    /,
) -> None: ...
def ulViewGoForward(
    arg0: ULView,
    /,
) -> None: ...
def ulViewGoToHistoryOffset(
    arg0: ULView,
    arg1: int,
    /,
) -> None: ...
def ulViewReload(
    arg0: ULView,
    /,
) -> None: ...
def ulViewStop(
    arg0: ULView,
    /,
) -> None: ...
def ulViewFocus(
    arg0: ULView,
    /,
) -> None: ...
def ulViewUnfocus(
    arg0: ULView,
    /,
) -> None: ...
def ulViewHasFocus(
    arg0: ULView,
    /,
) -> bool: ...
def ulViewHasInputFocus(
    arg0: ULView,
    /,
) -> bool: ...
def ulViewFireKeyEvent(
    arg0: ULView,
    arg1: ULKeyEvent,
    /,
) -> None: ...
def ulViewFireMouseEvent(
    arg0: ULView,
    arg1: ULMouseEvent,
    /,
) -> None: ...
def ulViewFireScrollEvent(
    arg0: ULView,
    arg1: ULScrollEvent,
    /,
) -> None: ...

ULChangeTitleCallback: TypeAlias = Callable[[Pointer[Any], ULView, ULString], None]

def ulViewSetChangeTitleCallback(
    arg0: ULView,
    arg1: ULChangeTitleCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULChangeURLCallback: TypeAlias = Callable[[Pointer[Any], ULView, ULString], None]

def ulViewSetChangeURLCallback(
    arg0: ULView,
    arg1: ULChangeURLCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULChangeTooltipCallback: TypeAlias = Callable[[Pointer[Any], ULView, ULString], None]

def ulViewSetChangeTooltipCallback(
    arg0: ULView,
    arg1: ULChangeTooltipCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULChangeCursorCallback: TypeAlias = Callable[[Pointer[Any], ULView, ULCursor], None]

def ulViewSetChangeCursorCallback(
    arg0: ULView,
    arg1: ULChangeCursorCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULAddConsoleMessageCallback: TypeAlias = Callable[
    [
        Pointer[Any],
        ULView,
        ULMessageSource,
        ULMessageLevel,
        ULString,
        int,
        int,
        ULString,
    ],
    None,
]

def ulViewSetAddConsoleMessageCallback(
    arg0: ULView,
    arg1: ULAddConsoleMessageCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULCreateChildViewCallback: TypeAlias = Callable[
    [Pointer[Any], ULView, ULString, ULString, bool, ULIntRect], ULView
]

def ulViewSetCreateChildViewCallback(
    arg0: ULView,
    arg1: ULCreateChildViewCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULCreateInspectorViewCallback: TypeAlias = Callable[
    [Pointer[Any], ULView, bool, ULString], ULView
]

def ulViewSetCreateInspectorViewCallback(
    arg0: ULView,
    arg1: ULCreateInspectorViewCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULBeginLoadingCallback: TypeAlias = Callable[
    [Pointer[Any], ULView, int, bool, ULString], None
]

def ulViewSetBeginLoadingCallback(
    arg0: ULView,
    arg1: ULBeginLoadingCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULFinishLoadingCallback: TypeAlias = Callable[
    [Pointer[Any], ULView, int, bool, ULString], None
]

def ulViewSetFinishLoadingCallback(
    arg0: ULView,
    arg1: ULFinishLoadingCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULFailLoadingCallback: TypeAlias = Callable[
    [Pointer[Any], ULView, int, bool, ULString, ULString, ULString, int], None
]

def ulViewSetFailLoadingCallback(
    arg0: ULView,
    arg1: ULFailLoadingCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULWindowObjectReadyCallback: TypeAlias = Callable[
    [Pointer[Any], ULView, int, bool, ULString], None
]

def ulViewSetWindowObjectReadyCallback(
    arg0: ULView,
    arg1: ULWindowObjectReadyCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULDOMReadyCallback: TypeAlias = Callable[
    [Pointer[Any], ULView, int, bool, ULString], None
]

def ulViewSetDOMReadyCallback(
    arg0: ULView,
    arg1: ULDOMReadyCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULUpdateHistoryCallback: TypeAlias = Callable[[Pointer[Any], ULView], None]

def ulViewSetUpdateHistoryCallback(
    arg0: ULView,
    arg1: ULUpdateHistoryCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...
def ulViewSetNeedsPaint(
    arg0: ULView,
    arg1: bool,
    /,
) -> None: ...
def ulViewGetNeedsPaint(
    arg0: ULView,
    /,
) -> bool: ...
def ulViewCreateLocalInspectorView(
    arg0: ULView,
    /,
) -> None: ...

class C_Settings: ...

ULSettings: TypeAlias = Pointer[C_Settings]

class C_App: ...

ULApp: TypeAlias = Pointer[C_App]

class C_Window: ...

ULWindow: TypeAlias = Pointer[C_Window]

class C_Monitor: ...

ULMonitor: TypeAlias = Pointer[C_Monitor]

class C_Overlay: ...

ULOverlay: TypeAlias = Pointer[C_Overlay]
# anonymous enum: anonymous ULWindowFlags; alias: ULWindowFlags

class ULWindowFlags(enum.IntEnum):
    kWindowFlags_Borderless = 1
    kWindowFlags_Titled = 2
    kWindowFlags_Resizable = 4
    kWindowFlags_Maximizable = 8
    kWindowFlags_Hidden = 16

kWindowFlags_Borderless = ULWindowFlags.kWindowFlags_Borderless
kWindowFlags_Titled = ULWindowFlags.kWindowFlags_Titled
kWindowFlags_Resizable = ULWindowFlags.kWindowFlags_Resizable
kWindowFlags_Maximizable = ULWindowFlags.kWindowFlags_Maximizable
kWindowFlags_Hidden = ULWindowFlags.kWindowFlags_Hidden

def ulCreateSettings() -> ULSettings: ...
def ulDestroySettings(
    arg0: ULSettings,
    /,
) -> None: ...
def ulSettingsSetDeveloperName(
    arg0: ULSettings,
    arg1: ULString,
    /,
) -> None: ...
def ulSettingsSetAppName(
    arg0: ULSettings,
    arg1: ULString,
    /,
) -> None: ...
def ulSettingsSetFileSystemPath(
    arg0: ULSettings,
    arg1: ULString,
    /,
) -> None: ...
def ulSettingsSetLoadShadersFromFileSystem(
    arg0: ULSettings,
    arg1: bool,
    /,
) -> None: ...
def ulSettingsSetForceCPURenderer(
    arg0: ULSettings,
    arg1: bool,
    /,
) -> None: ...
def ulCreateApp(
    arg0: ULSettings,
    arg1: ULConfig,
    /,
) -> ULApp: ...
def ulDestroyApp(
    arg0: ULApp,
    /,
) -> None: ...

ULUpdateCallback: TypeAlias = Callable[[Pointer[Any]], None]

def ulAppSetUpdateCallback(
    arg0: ULApp,
    arg1: ULUpdateCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...
def ulAppIsRunning(
    arg0: ULApp,
    /,
) -> bool: ...
def ulAppGetMainMonitor(
    arg0: ULApp,
    /,
) -> ULMonitor: ...
def ulAppGetRenderer(
    arg0: ULApp,
    /,
) -> ULRenderer: ...
def ulAppRun(
    arg0: ULApp,
    /,
) -> None: ...
def ulAppQuit(
    arg0: ULApp,
    /,
) -> None: ...
def ulMonitorGetScale(
    arg0: ULMonitor,
    /,
) -> float: ...
def ulMonitorGetWidth(
    arg0: ULMonitor,
    /,
) -> int: ...
def ulMonitorGetHeight(
    arg0: ULMonitor,
    /,
) -> int: ...
def ulCreateWindow(
    arg0: ULMonitor,
    arg1: int,
    arg2: int,
    arg3: bool,
    arg4: int,
    /,
) -> ULWindow: ...
def ulDestroyWindow(
    arg0: ULWindow,
    /,
) -> None: ...

ULCloseCallback: TypeAlias = Callable[[Pointer[Any], ULWindow], None]

def ulWindowSetCloseCallback(
    arg0: ULWindow,
    arg1: ULCloseCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...

ULResizeCallback: TypeAlias = Callable[[Pointer[Any], ULWindow, int, int], None]

def ulWindowSetResizeCallback(
    arg0: ULWindow,
    arg1: ULResizeCallback,
    arg2: Pointer[Any],
    /,
) -> None: ...
def ulWindowGetScreenWidth(
    arg0: ULWindow,
    /,
) -> int: ...
def ulWindowGetWidth(
    arg0: ULWindow,
    /,
) -> int: ...
def ulWindowGetScreenHeight(
    arg0: ULWindow,
    /,
) -> int: ...
def ulWindowGetHeight(
    arg0: ULWindow,
    /,
) -> int: ...
def ulWindowMoveTo(
    arg0: ULWindow,
    arg1: int,
    arg2: int,
    /,
) -> None: ...
def ulWindowMoveToCenter(
    arg0: ULWindow,
    /,
) -> None: ...
def ulWindowGetPositionX(
    arg0: ULWindow,
    /,
) -> int: ...
def ulWindowGetPositionY(
    arg0: ULWindow,
    /,
) -> int: ...
def ulWindowIsFullscreen(
    arg0: ULWindow,
    /,
) -> bool: ...
def ulWindowGetScale(
    arg0: ULWindow,
    /,
) -> float: ...
def ulWindowSetTitle(
    arg0: ULWindow,
    arg1: Pointer[bytes],
    /,
) -> None: ...
def ulWindowSetCursor(
    arg0: ULWindow,
    arg1: ULCursor,
    /,
) -> None: ...
def ulWindowShow(
    arg0: ULWindow,
    /,
) -> None: ...
def ulWindowHide(
    arg0: ULWindow,
    /,
) -> None: ...
def ulWindowIsVisible(
    arg0: ULWindow,
    /,
) -> bool: ...
def ulWindowClose(
    arg0: ULWindow,
    /,
) -> None: ...
def ulWindowScreenToPixels(
    arg0: ULWindow,
    arg1: int,
    /,
) -> int: ...
def ulWindowPixelsToScreen(
    arg0: ULWindow,
    arg1: int,
    /,
) -> int: ...
def ulWindowGetNativeHandle(
    arg0: ULWindow,
    /,
) -> Pointer[Any]: ...
def ulCreateOverlay(
    arg0: ULWindow,
    arg1: int,
    arg2: int,
    arg3: int,
    arg4: int,
    /,
) -> ULOverlay: ...
def ulCreateOverlayWithView(
    arg0: ULWindow,
    arg1: ULView,
    arg2: int,
    arg3: int,
    /,
) -> ULOverlay: ...
def ulDestroyOverlay(
    arg0: ULOverlay,
    /,
) -> None: ...
def ulOverlayGetView(
    arg0: ULOverlay,
    /,
) -> ULView: ...
def ulOverlayGetWidth(
    arg0: ULOverlay,
    /,
) -> int: ...
def ulOverlayGetHeight(
    arg0: ULOverlay,
    /,
) -> int: ...
def ulOverlayGetX(
    arg0: ULOverlay,
    /,
) -> int: ...
def ulOverlayGetY(
    arg0: ULOverlay,
    /,
) -> int: ...
def ulOverlayMoveTo(
    arg0: ULOverlay,
    arg1: int,
    arg2: int,
    /,
) -> None: ...
def ulOverlayResize(
    arg0: ULOverlay,
    arg1: int,
    arg2: int,
    /,
) -> None: ...
def ulOverlayIsHidden(
    arg0: ULOverlay,
    /,
) -> bool: ...
def ulOverlayHide(
    arg0: ULOverlay,
    /,
) -> None: ...
def ulOverlayShow(
    arg0: ULOverlay,
    /,
) -> None: ...
def ulOverlayHasFocus(
    arg0: ULOverlay,
    /,
) -> bool: ...
def ulOverlayFocus(
    arg0: ULOverlay,
    /,
) -> None: ...
def ulOverlayUnfocus(
    arg0: ULOverlay,
    /,
) -> None: ...
def ulEnablePlatformFontLoader() -> None: ...
def ulEnablePlatformFileSystem(
    arg0: ULString,
    /,
) -> None: ...
def ulEnableDefaultLogger(
    arg0: ULString,
    /,
) -> None: ...
