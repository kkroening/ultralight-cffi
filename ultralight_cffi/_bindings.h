/*
 * WARNING: This file is generated automatically by `scripts/gen_bindings`.
 * Do not edit this file by hand!
 *
 * See `README.md`.
 */

typedef long int ptrdiff_t;
typedef long unsigned int size_t;
typedef unsigned int wchar_t;

typedef struct {
  long long __max_align_ll;
  long double __max_align_ld;
} max_align_t;

typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;
typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;
typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;

typedef struct {
  int __val[2];
} __fsid_t;

typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;
typedef int __daddr_t;
typedef int __key_t;
typedef int __clockid_t;
typedef void* __timer_t;
typedef int __blksize_t;
typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;
typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;
typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;
typedef long int __fsword_t;
typedef long int __ssize_t;
typedef long int __syscall_slong_t;
typedef unsigned long int __syscall_ulong_t;
typedef __off64_t __loff_t;
typedef char* __caddr_t;
typedef long int __intptr_t;
typedef unsigned int __socklen_t;
typedef int __sig_atomic_t;
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;
typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;
typedef signed char int_fast8_t;
typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
typedef long int intptr_t;
typedef unsigned long int uintptr_t;
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
typedef const struct OpaqueJSContextGroup* JSContextGroupRef;
typedef const struct OpaqueJSContext* JSContextRef;
typedef struct OpaqueJSContext* JSGlobalContextRef;
typedef struct OpaqueJSString* JSStringRef;
typedef struct OpaqueJSClass* JSClassRef;
typedef struct OpaqueJSPropertyNameArray* JSPropertyNameArrayRef;
typedef struct OpaqueJSPropertyNameAccumulator* JSPropertyNameAccumulatorRef;
typedef void (*JSTypedArrayBytesDeallocator)(void* bytes, void* deallocatorContext);
typedef const struct OpaqueJSValue* JSValueRef;
typedef struct OpaqueJSValue* JSObjectRef;
JSValueRef JSEvaluateScript(
    JSContextRef ctx,
    JSStringRef script,
    JSObjectRef thisObject,
    JSStringRef sourceURL,
    int startingLineNumber,
    JSValueRef* exception);
_Bool JSCheckScriptSyntax(
    JSContextRef ctx,
    JSStringRef script,
    JSStringRef sourceURL,
    int startingLineNumber,
    JSValueRef* exception);
void JSGarbageCollect(JSContextRef ctx);

typedef enum {
  kJSTypeUndefined,
  kJSTypeNull,
  kJSTypeBoolean,
  kJSTypeNumber,
  kJSTypeString,
  kJSTypeObject,
  kJSTypeSymbol
} JSType;

typedef enum {
  kJSTypedArrayTypeInt8Array,
  kJSTypedArrayTypeInt16Array,
  kJSTypedArrayTypeInt32Array,
  kJSTypedArrayTypeUint8Array,
  kJSTypedArrayTypeUint8ClampedArray,
  kJSTypedArrayTypeUint16Array,
  kJSTypedArrayTypeUint32Array,
  kJSTypedArrayTypeFloat32Array,
  kJSTypedArrayTypeFloat64Array,
  kJSTypedArrayTypeArrayBuffer,
  kJSTypedArrayTypeNone,
  kJSTypedArrayTypeBigInt64Array,
  kJSTypedArrayTypeBigUint64Array,
} JSTypedArrayType;

JSType JSValueGetType(JSContextRef ctx, JSValueRef value);
_Bool JSValueIsUndefined(JSContextRef ctx, JSValueRef value);
_Bool JSValueIsNull(JSContextRef ctx, JSValueRef value);
_Bool JSValueIsBoolean(JSContextRef ctx, JSValueRef value);
_Bool JSValueIsNumber(JSContextRef ctx, JSValueRef value);
_Bool JSValueIsString(JSContextRef ctx, JSValueRef value);
_Bool JSValueIsSymbol(JSContextRef ctx, JSValueRef value);
_Bool JSValueIsObject(JSContextRef ctx, JSValueRef value);
_Bool JSValueIsObjectOfClass(JSContextRef ctx, JSValueRef value, JSClassRef jsClass);
_Bool JSValueIsArray(JSContextRef ctx, JSValueRef value);
_Bool JSValueIsDate(JSContextRef ctx, JSValueRef value);
JSTypedArrayType
JSValueGetTypedArrayType(JSContextRef ctx, JSValueRef value, JSValueRef* exception);
_Bool JSValueIsEqual(
    JSContextRef ctx,
    JSValueRef a,
    JSValueRef b,
    JSValueRef* exception);
_Bool JSValueIsStrictEqual(JSContextRef ctx, JSValueRef a, JSValueRef b);
_Bool JSValueIsInstanceOfConstructor(
    JSContextRef ctx,
    JSValueRef value,
    JSObjectRef constructor,
    JSValueRef* exception);
JSValueRef JSValueMakeUndefined(JSContextRef ctx);
JSValueRef JSValueMakeNull(JSContextRef ctx);
JSValueRef JSValueMakeBoolean(JSContextRef ctx, _Bool boolean);
JSValueRef JSValueMakeNumber(JSContextRef ctx, double number);
JSValueRef JSValueMakeString(JSContextRef ctx, JSStringRef string);
JSValueRef JSValueMakeSymbol(JSContextRef ctx, JSStringRef description);
JSValueRef JSValueMakeFromJSONString(JSContextRef ctx, JSStringRef string);
JSStringRef JSValueCreateJSONString(
    JSContextRef ctx,
    JSValueRef value,
    unsigned indent,
    JSValueRef* exception);
_Bool JSValueToBoolean(JSContextRef ctx, JSValueRef value);
double JSValueToNumber(JSContextRef ctx, JSValueRef value, JSValueRef* exception);
JSStringRef
JSValueToStringCopy(JSContextRef ctx, JSValueRef value, JSValueRef* exception);
JSObjectRef JSValueToObject(JSContextRef ctx, JSValueRef value, JSValueRef* exception);
void JSValueProtect(JSContextRef ctx, JSValueRef value);
void JSValueUnprotect(JSContextRef ctx, JSValueRef value);

enum {
  kJSPropertyAttributeNone = 0,
  kJSPropertyAttributeReadOnly = 1 << 1,
  kJSPropertyAttributeDontEnum = 1 << 2,
  kJSPropertyAttributeDontDelete = 1 << 3
};

typedef unsigned JSPropertyAttributes;

enum { kJSClassAttributeNone = 0, kJSClassAttributeNoAutomaticPrototype = 1 << 1 };

typedef unsigned JSClassAttributes;
typedef void (*JSObjectInitializeCallback)(JSContextRef ctx, JSObjectRef object);
typedef void (*JSObjectFinalizeCallback)(JSObjectRef object);
typedef _Bool (*JSObjectHasPropertyCallback)(
    JSContextRef ctx,
    JSObjectRef object,
    JSStringRef propertyName);
typedef JSValueRef (*JSObjectGetPropertyCallback)(
    JSContextRef ctx,
    JSObjectRef object,
    JSStringRef propertyName,
    JSValueRef* exception);
typedef _Bool (*JSObjectSetPropertyCallback)(
    JSContextRef ctx,
    JSObjectRef object,
    JSStringRef propertyName,
    JSValueRef value,
    JSValueRef* exception);
typedef _Bool (*JSObjectDeletePropertyCallback)(
    JSContextRef ctx,
    JSObjectRef object,
    JSStringRef propertyName,
    JSValueRef* exception);
typedef void (*JSObjectGetPropertyNamesCallback)(
    JSContextRef ctx,
    JSObjectRef object,
    JSPropertyNameAccumulatorRef propertyNames);
typedef JSValueRef (*JSObjectCallAsFunctionCallback)(
    JSContextRef ctx,
    JSObjectRef function,
    JSObjectRef thisObject,
    size_t argumentCount,
    const JSValueRef arguments[],
    JSValueRef* exception);
typedef JSObjectRef (*JSObjectCallAsConstructorCallback)(
    JSContextRef ctx,
    JSObjectRef constructor,
    size_t argumentCount,
    const JSValueRef arguments[],
    JSValueRef* exception);
typedef _Bool (*JSObjectHasInstanceCallback)(
    JSContextRef ctx,
    JSObjectRef constructor,
    JSValueRef possibleInstance,
    JSValueRef* exception);
typedef JSValueRef (*JSObjectConvertToTypeCallback)(
    JSContextRef ctx,
    JSObjectRef object,
    JSType type,
    JSValueRef* exception);

typedef struct {
  const char* name;
  JSObjectGetPropertyCallback getProperty;
  JSObjectSetPropertyCallback setProperty;
  JSPropertyAttributes attributes;
} JSStaticValue;

typedef struct {
  const char* name;
  JSObjectCallAsFunctionCallback callAsFunction;
  JSPropertyAttributes attributes;
} JSStaticFunction;

typedef struct {
  int version;
  JSClassAttributes attributes;
  const char* className;
  JSClassRef parentClass;
  const JSStaticValue* staticValues;
  const JSStaticFunction* staticFunctions;
  JSObjectInitializeCallback initialize;
  JSObjectFinalizeCallback finalize;
  JSObjectHasPropertyCallback hasProperty;
  JSObjectGetPropertyCallback getProperty;
  JSObjectSetPropertyCallback setProperty;
  JSObjectDeletePropertyCallback deleteProperty;
  JSObjectGetPropertyNamesCallback getPropertyNames;
  JSObjectCallAsFunctionCallback callAsFunction;
  JSObjectCallAsConstructorCallback callAsConstructor;
  JSObjectHasInstanceCallback hasInstance;
  JSObjectConvertToTypeCallback convertToType;
} JSClassDefinition;

extern const JSClassDefinition kJSClassDefinitionEmpty;
JSClassRef JSClassCreate(const JSClassDefinition* definition);
JSClassRef JSClassRetain(JSClassRef jsClass);
void JSClassRelease(JSClassRef jsClass);
JSObjectRef JSObjectMake(JSContextRef ctx, JSClassRef jsClass, void* data);
JSObjectRef JSObjectMakeFunctionWithCallback(
    JSContextRef ctx,
    JSStringRef name,
    JSObjectCallAsFunctionCallback callAsFunction);
JSObjectRef JSObjectMakeConstructor(
    JSContextRef ctx,
    JSClassRef jsClass,
    JSObjectCallAsConstructorCallback callAsConstructor);
JSObjectRef JSObjectMakeArray(
    JSContextRef ctx,
    size_t argumentCount,
    const JSValueRef arguments[],
    JSValueRef* exception);
JSObjectRef JSObjectMakeDate(
    JSContextRef ctx,
    size_t argumentCount,
    const JSValueRef arguments[],
    JSValueRef* exception);
JSObjectRef JSObjectMakeError(
    JSContextRef ctx,
    size_t argumentCount,
    const JSValueRef arguments[],
    JSValueRef* exception);
JSObjectRef JSObjectMakeRegExp(
    JSContextRef ctx,
    size_t argumentCount,
    const JSValueRef arguments[],
    JSValueRef* exception);
JSObjectRef JSObjectMakeDeferredPromise(
    JSContextRef ctx,
    JSObjectRef* resolve,
    JSObjectRef* reject,
    JSValueRef* exception);
JSObjectRef JSObjectMakeFunction(
    JSContextRef ctx,
    JSStringRef name,
    unsigned parameterCount,
    const JSStringRef parameterNames[],
    JSStringRef body,
    JSStringRef sourceURL,
    int startingLineNumber,
    JSValueRef* exception);
JSValueRef JSObjectGetPrototype(JSContextRef ctx, JSObjectRef object);
void JSObjectSetPrototype(JSContextRef ctx, JSObjectRef object, JSValueRef value);
_Bool JSObjectHasProperty(
    JSContextRef ctx,
    JSObjectRef object,
    JSStringRef propertyName);
JSValueRef JSObjectGetProperty(
    JSContextRef ctx,
    JSObjectRef object,
    JSStringRef propertyName,
    JSValueRef* exception);
void JSObjectSetProperty(
    JSContextRef ctx,
    JSObjectRef object,
    JSStringRef propertyName,
    JSValueRef value,
    JSPropertyAttributes attributes,
    JSValueRef* exception);
_Bool JSObjectDeleteProperty(
    JSContextRef ctx,
    JSObjectRef object,
    JSStringRef propertyName,
    JSValueRef* exception);
_Bool JSObjectHasPropertyForKey(
    JSContextRef ctx,
    JSObjectRef object,
    JSValueRef propertyKey,
    JSValueRef* exception);
JSValueRef JSObjectGetPropertyForKey(
    JSContextRef ctx,
    JSObjectRef object,
    JSValueRef propertyKey,
    JSValueRef* exception);
void JSObjectSetPropertyForKey(
    JSContextRef ctx,
    JSObjectRef object,
    JSValueRef propertyKey,
    JSValueRef value,
    JSPropertyAttributes attributes,
    JSValueRef* exception);
_Bool JSObjectDeletePropertyForKey(
    JSContextRef ctx,
    JSObjectRef object,
    JSValueRef propertyKey,
    JSValueRef* exception);
JSValueRef JSObjectGetPropertyAtIndex(
    JSContextRef ctx,
    JSObjectRef object,
    unsigned propertyIndex,
    JSValueRef* exception);
void JSObjectSetPropertyAtIndex(
    JSContextRef ctx,
    JSObjectRef object,
    unsigned propertyIndex,
    JSValueRef value,
    JSValueRef* exception);
void* JSObjectGetPrivate(JSObjectRef object);
_Bool JSObjectSetPrivate(JSObjectRef object, void* data);
_Bool JSObjectIsFunction(JSContextRef ctx, JSObjectRef object);
JSValueRef JSObjectCallAsFunction(
    JSContextRef ctx,
    JSObjectRef object,
    JSObjectRef thisObject,
    size_t argumentCount,
    const JSValueRef arguments[],
    JSValueRef* exception);
_Bool JSObjectIsConstructor(JSContextRef ctx, JSObjectRef object);
JSObjectRef JSObjectCallAsConstructor(
    JSContextRef ctx,
    JSObjectRef object,
    size_t argumentCount,
    const JSValueRef arguments[],
    JSValueRef* exception);
JSPropertyNameArrayRef JSObjectCopyPropertyNames(JSContextRef ctx, JSObjectRef object);
JSPropertyNameArrayRef JSPropertyNameArrayRetain(JSPropertyNameArrayRef array);
void JSPropertyNameArrayRelease(JSPropertyNameArrayRef array);
size_t JSPropertyNameArrayGetCount(JSPropertyNameArrayRef array);
JSStringRef
JSPropertyNameArrayGetNameAtIndex(JSPropertyNameArrayRef array, size_t index);
void JSPropertyNameAccumulatorAddName(
    JSPropertyNameAccumulatorRef accumulator,
    JSStringRef propertyName);
JSContextGroupRef JSContextGroupCreate(void);
JSContextGroupRef JSContextGroupRetain(JSContextGroupRef group);
void JSContextGroupRelease(JSContextGroupRef group);
JSGlobalContextRef JSGlobalContextCreate(JSClassRef globalObjectClass);
JSGlobalContextRef
JSGlobalContextCreateInGroup(JSContextGroupRef group, JSClassRef globalObjectClass);
JSGlobalContextRef JSGlobalContextRetain(JSGlobalContextRef ctx);
void JSGlobalContextRelease(JSGlobalContextRef ctx);
JSObjectRef JSContextGetGlobalObject(JSContextRef ctx);
JSContextGroupRef JSContextGetGroup(JSContextRef ctx);
JSGlobalContextRef JSContextGetGlobalContext(JSContextRef ctx);
JSStringRef JSGlobalContextCopyName(JSGlobalContextRef ctx);
void JSGlobalContextSetName(JSGlobalContextRef ctx, JSStringRef name);
_Bool JSGlobalContextIsInspectable(JSGlobalContextRef ctx);
void JSGlobalContextSetInspectable(JSGlobalContextRef ctx, _Bool inspectable);
typedef unsigned short JSChar;
JSStringRef JSStringCreateWithCharacters(const JSChar* chars, size_t numChars);
JSStringRef JSStringCreateWithUTF8CString(const char* string);
JSStringRef JSStringRetain(JSStringRef string);
void JSStringRelease(JSStringRef string);
size_t JSStringGetLength(JSStringRef string);
const JSChar* JSStringGetCharactersPtr(JSStringRef string);
size_t JSStringGetMaximumUTF8CStringSize(JSStringRef string);
size_t JSStringGetUTF8CString(JSStringRef string, char* buffer, size_t bufferSize);
_Bool JSStringIsEqual(JSStringRef a, JSStringRef b);
_Bool JSStringIsEqualToUTF8CString(JSStringRef a, const char* b);
JSObjectRef JSObjectMakeTypedArray(
    JSContextRef ctx,
    JSTypedArrayType arrayType,
    size_t length,
    JSValueRef* exception);
JSObjectRef JSObjectMakeTypedArrayWithBytesNoCopy(
    JSContextRef ctx,
    JSTypedArrayType arrayType,
    void* bytes,
    size_t byteLength,
    JSTypedArrayBytesDeallocator bytesDeallocator,
    void* deallocatorContext,
    JSValueRef* exception);
JSObjectRef JSObjectMakeTypedArrayWithArrayBuffer(
    JSContextRef ctx,
    JSTypedArrayType arrayType,
    JSObjectRef buffer,
    JSValueRef* exception);
JSObjectRef JSObjectMakeTypedArrayWithArrayBufferAndOffset(
    JSContextRef ctx,
    JSTypedArrayType arrayType,
    JSObjectRef buffer,
    size_t byteOffset,
    size_t length,
    JSValueRef* exception);
void* JSObjectGetTypedArrayBytesPtr(
    JSContextRef ctx,
    JSObjectRef object,
    JSValueRef* exception);
size_t JSObjectGetTypedArrayLength(
    JSContextRef ctx,
    JSObjectRef object,
    JSValueRef* exception);
size_t JSObjectGetTypedArrayByteLength(
    JSContextRef ctx,
    JSObjectRef object,
    JSValueRef* exception);
size_t JSObjectGetTypedArrayByteOffset(
    JSContextRef ctx,
    JSObjectRef object,
    JSValueRef* exception);
JSObjectRef JSObjectGetTypedArrayBuffer(
    JSContextRef ctx,
    JSObjectRef object,
    JSValueRef* exception);
JSObjectRef JSObjectMakeArrayBufferWithBytesNoCopy(
    JSContextRef ctx,
    void* bytes,
    size_t byteLength,
    JSTypedArrayBytesDeallocator bytesDeallocator,
    void* deallocatorContext,
    JSValueRef* exception);
void* JSObjectGetArrayBufferBytesPtr(
    JSContextRef ctx,
    JSObjectRef object,
    JSValueRef* exception);
size_t JSObjectGetArrayBufferByteLength(
    JSContextRef ctx,
    JSObjectRef object,
    JSValueRef* exception);
typedef unsigned short ULChar16;
typedef struct C_Config* ULConfig;
typedef struct C_Renderer* ULRenderer;
typedef struct C_Session* ULSession;
typedef struct C_ViewConfig* ULViewConfig;
typedef struct C_View* ULView;
typedef struct C_Bitmap* ULBitmap;
typedef struct C_String* ULString;
typedef struct C_Buffer* ULBuffer;
typedef struct C_KeyEvent* ULKeyEvent;
typedef struct C_MouseEvent* ULMouseEvent;
typedef struct C_ScrollEvent* ULScrollEvent;
typedef struct C_GamepadEvent* ULGamepadEvent;
typedef struct C_GamepadAxisEvent* ULGamepadAxisEvent;
typedef struct C_GamepadButtonEvent* ULGamepadButtonEvent;
typedef struct C_Surface* ULSurface;
typedef struct C_Surface* ULBitmapSurface;
typedef struct C_FontFile* ULFontFile;
typedef struct C_ImageSource* ULImageSource;

typedef enum {
  kMessageSource_XML = 0,
  kMessageSource_JS,
  kMessageSource_Network,
  kMessageSource_ConsoleAPI,
  kMessageSource_Storage,
  kMessageSource_AppCache,
  kMessageSource_Rendering,
  kMessageSource_CSS,
  kMessageSource_Security,
  kMessageSource_ContentBlocker,
  kMessageSource_Media,
  kMessageSource_MediaSource,
  kMessageSource_WebRTC,
  kMessageSource_ITPDebug,
  kMessageSource_PrivateClickMeasurement,
  kMessageSource_PaymentRequest,
  kMessageSource_Other,
} ULMessageSource;

typedef enum {
  kMessageLevel_Log = 0,
  kMessageLevel_Warning,
  kMessageLevel_Error,
  kMessageLevel_Debug,
  kMessageLevel_Info,
} ULMessageLevel;

typedef enum {
  kCursor_Pointer = 0,
  kCursor_Cross,
  kCursor_Hand,
  kCursor_IBeam,
  kCursor_Wait,
  kCursor_Help,
  kCursor_EastResize,
  kCursor_NorthResize,
  kCursor_NorthEastResize,
  kCursor_NorthWestResize,
  kCursor_SouthResize,
  kCursor_SouthEastResize,
  kCursor_SouthWestResize,
  kCursor_WestResize,
  kCursor_NorthSouthResize,
  kCursor_EastWestResize,
  kCursor_NorthEastSouthWestResize,
  kCursor_NorthWestSouthEastResize,
  kCursor_ColumnResize,
  kCursor_RowResize,
  kCursor_MiddlePanning,
  kCursor_EastPanning,
  kCursor_NorthPanning,
  kCursor_NorthEastPanning,
  kCursor_NorthWestPanning,
  kCursor_SouthPanning,
  kCursor_SouthEastPanning,
  kCursor_SouthWestPanning,
  kCursor_WestPanning,
  kCursor_Move,
  kCursor_VerticalText,
  kCursor_Cell,
  kCursor_ContextMenu,
  kCursor_Alias,
  kCursor_Progress,
  kCursor_NoDrop,
  kCursor_Copy,
  kCursor_None,
  kCursor_NotAllowed,
  kCursor_ZoomIn,
  kCursor_ZoomOut,
  kCursor_Grab,
  kCursor_Grabbing,
  kCursor_Custom
} ULCursor;

typedef enum { kBitmapFormat_A8_UNORM, kBitmapFormat_BGRA8_UNORM_SRGB } ULBitmapFormat;

typedef enum {
  kKeyEventType_KeyDown,
  kKeyEventType_KeyUp,
  kKeyEventType_RawKeyDown,
  kKeyEventType_Char,
} ULKeyEventType;

typedef enum {
  kMouseEventType_MouseMoved,
  kMouseEventType_MouseDown,
  kMouseEventType_MouseUp,
} ULMouseEventType;

typedef enum {
  kMouseButton_None = 0,
  kMouseButton_Left,
  kMouseButton_Middle,
  kMouseButton_Right,
} ULMouseButton;

typedef enum {
  kScrollEventType_ScrollByPixel,
  kScrollEventType_ScrollByPage,
} ULScrollEventType;

typedef enum {
  kGamepadEventType_Connected,
  kGamepadEventType_Disconnected,
} ULGamepadEventType;

typedef enum {
  kFaceWinding_Clockwise,
  kFaceWinding_CounterClockwise,
} ULFaceWinding;

typedef enum {
  kFontHinting_Smooth,
  kFontHinting_Normal,
  kFontHinting_Monochrome,
} ULFontHinting;

typedef struct {
  float left;
  float top;
  float right;
  float bottom;
} ULRect;

typedef struct {
  int left;
  int top;
  int right;
  int bottom;
} ULIntRect;

typedef struct {
  _Bool is_empty;
  unsigned int width;
  unsigned int height;
  unsigned int texture_id;
  unsigned int texture_width;
  unsigned int texture_height;
  ULBitmapFormat texture_format;
  ULRect uv_coords;
  unsigned int render_buffer_id;
} ULRenderTarget;

const char* ulVersionString();
unsigned int ulVersionMajor();
unsigned int ulVersionMinor();
unsigned int ulVersionPatch();
const char* ulWebKitVersionString();
ULBitmap ulCreateEmptyBitmap();
ULBitmap ulCreateBitmap(unsigned int width, unsigned int height, ULBitmapFormat format);
ULBitmap ulCreateBitmapFromPixels(
    unsigned int width,
    unsigned int height,
    ULBitmapFormat format,
    unsigned int row_bytes,
    const void* pixels,
    size_t size,
    _Bool should_copy);
ULBitmap ulCreateBitmapFromCopy(ULBitmap existing_bitmap);
void ulDestroyBitmap(ULBitmap bitmap);
unsigned int ulBitmapGetWidth(ULBitmap bitmap);
unsigned int ulBitmapGetHeight(ULBitmap bitmap);
ULBitmapFormat ulBitmapGetFormat(ULBitmap bitmap);
unsigned int ulBitmapGetBpp(ULBitmap bitmap);
unsigned int ulBitmapGetRowBytes(ULBitmap bitmap);
size_t ulBitmapGetSize(ULBitmap bitmap);
_Bool ulBitmapOwnsPixels(ULBitmap bitmap);
void* ulBitmapLockPixels(ULBitmap bitmap);
void ulBitmapUnlockPixels(ULBitmap bitmap);
void* ulBitmapRawPixels(ULBitmap bitmap);
_Bool ulBitmapIsEmpty(ULBitmap bitmap);
void ulBitmapErase(ULBitmap bitmap);
_Bool ulBitmapWritePNG(ULBitmap bitmap, const char* path);
void ulBitmapSwapRedBlueChannels(ULBitmap bitmap);
typedef void (*ulDestroyBufferCallback)(void* user_data, void* data);
ULBuffer ulCreateBuffer(
    void* data,
    size_t size,
    void* user_data,
    ulDestroyBufferCallback destruction_callback);
ULBuffer ulCreateBufferFromCopy(const void* data, size_t size);
void ulDestroyBuffer(ULBuffer buffer);
void* ulBufferGetData(ULBuffer buffer);
size_t ulBufferGetSize(ULBuffer buffer);
void* ulBufferGetUserData(ULBuffer buffer);
_Bool ulBufferOwnsData(ULBuffer buffer);
typedef void (*ULClipboardClearCallback)();
typedef void (*ULClipboardReadPlainTextCallback)(ULString result);
typedef void (*ULClipboardWritePlainTextCallback)(ULString text);

typedef struct {
  ULClipboardClearCallback clear;
  ULClipboardReadPlainTextCallback read_plain_text;
  ULClipboardWritePlainTextCallback write_plain_text;
} ULClipboard;

ULConfig ulCreateConfig();
void ulDestroyConfig(ULConfig config);
void ulConfigSetCachePath(ULConfig config, ULString cache_path);
void ulConfigSetResourcePathPrefix(ULConfig config, ULString resource_path_prefix);
void ulConfigSetFaceWinding(ULConfig config, ULFaceWinding winding);
void ulConfigSetFontHinting(ULConfig config, ULFontHinting font_hinting);
void ulConfigSetFontGamma(ULConfig config, double font_gamma);
void ulConfigSetUserStylesheet(ULConfig config, ULString css_string);
void ulConfigSetForceRepaint(ULConfig config, _Bool enabled);
void ulConfigSetAnimationTimerDelay(ULConfig config, double delay);
void ulConfigSetScrollTimerDelay(ULConfig config, double delay);
void ulConfigSetRecycleDelay(ULConfig config, double delay);
void ulConfigSetMemoryCacheSize(ULConfig config, unsigned int size);
void ulConfigSetPageCacheSize(ULConfig config, unsigned int size);
void ulConfigSetOverrideRAMSize(ULConfig config, unsigned int size);
void ulConfigSetMinLargeHeapSize(ULConfig config, unsigned int size);
void ulConfigSetMinSmallHeapSize(ULConfig config, unsigned int size);
void ulConfigSetNumRendererThreads(ULConfig config, unsigned int num_renderer_threads);
void ulConfigSetMaxUpdateTime(ULConfig config, double max_update_time);
void ulConfigSetBitmapAlignment(ULConfig config, unsigned int bitmap_alignment);
typedef _Bool (*ULFileSystemFileExistsCallback)(ULString path);
typedef ULString (*ULFileSystemGetFileMimeTypeCallback)(ULString path);
typedef ULString (*ULFileSystemGetFileCharsetCallback)(ULString path);
typedef ULBuffer (*ULFileSystemOpenFileCallback)(ULString path);

typedef struct {
  ULFileSystemFileExistsCallback file_exists;
  ULFileSystemGetFileMimeTypeCallback get_file_mime_type;
  ULFileSystemGetFileCharsetCallback get_file_charset;
  ULFileSystemOpenFileCallback open_file;
} ULFileSystem;

ULString ulCreateString(const char* str);
ULString ulCreateStringUTF8(const char* str, size_t len);
ULString ulCreateStringUTF16(ULChar16* str, size_t len);
ULString ulCreateStringFromCopy(ULString str);
void ulDestroyString(ULString str);
char* ulStringGetData(ULString str);
size_t ulStringGetLength(ULString str);
_Bool ulStringIsEmpty(ULString str);
void ulStringAssignString(ULString str, ULString new_str);
void ulStringAssignCString(ULString str, const char* c_str);
ULFontFile ulFontFileCreateFromFilePath(ULString file_path);
ULFontFile ulFontFileCreateFromBuffer(ULBuffer buffer);
void ulDestroyFontFile(ULFontFile font_file);
typedef ULString (*ULFontLoaderGetFallbackFont)();
typedef ULString (*ULFontLoaderGetFallbackFontForCharacters)(
    ULString characters,
    int weight,
    _Bool italic);
typedef ULFontFile (*ULFontLoaderLoad)(ULString family, int weight, _Bool italic);

typedef struct {
  ULFontLoaderGetFallbackFont get_fallback_font;
  ULFontLoaderGetFallbackFontForCharacters get_fallback_font_for_characters;
  ULFontLoaderLoad load;
} ULFontLoader;

_Bool ulRectIsEmpty(ULRect rect);
ULRect ulRectMakeEmpty();
_Bool ulIntRectIsEmpty(ULIntRect rect);
ULIntRect ulIntRectMakeEmpty();

typedef struct {
  unsigned int texture_id;
  unsigned int width;
  unsigned int height;
  _Bool has_stencil_buffer;
  _Bool has_depth_buffer;
} ULRenderBuffer;

typedef struct {
  float pos[2];
  unsigned char color[4];
  float obj[2];
} ULVertex_2f_4ub_2f;

typedef struct {
  float pos[2];
  unsigned char color[4];
  float tex[2];
  float obj[2];
  float data0[4];
  float data1[4];
  float data2[4];
  float data3[4];
  float data4[4];
  float data5[4];
  float data6[4];
} ULVertex_2f_4ub_2f_2f_28f;

typedef enum {
  kVertexBufferFormat_2f_4ub_2f,
  kVertexBufferFormat_2f_4ub_2f_2f_28f,
} ULVertexBufferFormat;

typedef struct {
  ULVertexBufferFormat format;
  unsigned int size;
  unsigned char* data;
} ULVertexBuffer;

typedef unsigned int ULIndexType;

typedef struct {
  unsigned int size;
  unsigned char* data;
} ULIndexBuffer;

typedef enum {
  kShaderType_Fill,
  kShaderType_FillPath,
} ULShaderType;

typedef struct {
  float data[16];
} ULMatrix4x4;

typedef struct {
  float value[4];
} ULvec4;

typedef struct {
  unsigned int viewport_width;
  unsigned int viewport_height;
  ULMatrix4x4 transform;
  _Bool enable_texturing;
  _Bool enable_blend;
  unsigned char shader_type;
  unsigned int render_buffer_id;
  unsigned int texture_1_id;
  unsigned int texture_2_id;
  unsigned int texture_3_id;
  float uniform_scalar[8];
  ULvec4 uniform_vector[8];
  unsigned char clip_size;
  ULMatrix4x4 clip[8];
  _Bool enable_scissor;
  ULIntRect scissor_rect;
} ULGPUState;

typedef enum {
  kCommandType_ClearRenderBuffer,
  kCommandType_DrawGeometry,
} ULCommandType;

typedef struct {
  unsigned char command_type;
  ULGPUState gpu_state;
  unsigned int geometry_id;
  unsigned int indices_count;
  unsigned int indices_offset;
} ULCommand;

typedef struct {
  unsigned int size;
  ULCommand* commands;
} ULCommandList;

typedef void (*ULGPUDriverBeginSynchronizeCallback)();
typedef void (*ULGPUDriverEndSynchronizeCallback)();
typedef unsigned int (*ULGPUDriverNextTextureIdCallback)();
typedef void (
    *ULGPUDriverCreateTextureCallback)(unsigned int texture_id, ULBitmap bitmap);
typedef void (
    *ULGPUDriverUpdateTextureCallback)(unsigned int texture_id, ULBitmap bitmap);
typedef void (*ULGPUDriverDestroyTextureCallback)(unsigned int texture_id);
typedef unsigned int (*ULGPUDriverNextRenderBufferIdCallback)();
typedef void (*ULGPUDriverCreateRenderBufferCallback)(
    unsigned int render_buffer_id,
    ULRenderBuffer buffer);
typedef void (*ULGPUDriverDestroyRenderBufferCallback)(unsigned int render_buffer_id);
typedef unsigned int (*ULGPUDriverNextGeometryIdCallback)();
typedef void (*ULGPUDriverCreateGeometryCallback)(
    unsigned int geometry_id,
    ULVertexBuffer vertices,
    ULIndexBuffer indices);
typedef void (*ULGPUDriverUpdateGeometryCallback)(
    unsigned int geometry_id,
    ULVertexBuffer vertices,
    ULIndexBuffer indices);
typedef void (*ULGPUDriverDestroyGeometryCallback)(unsigned int geometry_id);
typedef void (*ULGPUDriverUpdateCommandListCallback)(ULCommandList list);

typedef struct {
  ULGPUDriverBeginSynchronizeCallback begin_synchronize;
  ULGPUDriverEndSynchronizeCallback end_synchronize;
  ULGPUDriverNextTextureIdCallback next_texture_id;
  ULGPUDriverCreateTextureCallback create_texture;
  ULGPUDriverUpdateTextureCallback update_texture;
  ULGPUDriverDestroyTextureCallback destroy_texture;
  ULGPUDriverNextRenderBufferIdCallback next_render_buffer_id;
  ULGPUDriverCreateRenderBufferCallback create_render_buffer;
  ULGPUDriverDestroyRenderBufferCallback destroy_render_buffer;
  ULGPUDriverNextGeometryIdCallback next_geometry_id;
  ULGPUDriverCreateGeometryCallback create_geometry;
  ULGPUDriverUpdateGeometryCallback update_geometry;
  ULGPUDriverDestroyGeometryCallback destroy_geometry;
  ULGPUDriverUpdateCommandListCallback update_command_list;
} ULGPUDriver;

ULMatrix4x4 ulApplyProjection(
    ULMatrix4x4 transform,
    float viewport_width,
    float viewport_height,
    _Bool flip_y);
ULImageSource ulCreateImageSourceFromTexture(
    unsigned int width,
    unsigned int height,
    unsigned int texture_id,
    ULRect texture_uv,
    ULBitmap bitmap);
ULImageSource ulCreateImageSourceFromBitmap(ULBitmap bitmap);
void ulDestroyImageSource(ULImageSource image_source);
void ulImageSourceInvalidate(ULImageSource image_source);
void ulImageSourceProviderAddImageSource(ULString id, ULImageSource image_source);
void ulImageSourceProviderRemoveImageSource(ULString id);
ULKeyEvent ulCreateKeyEvent(
    ULKeyEventType type,
    unsigned int modifiers,
    int virtual_key_code,
    int native_key_code,
    ULString text,
    ULString unmodified_text,
    _Bool is_keypad,
    _Bool is_auto_repeat,
    _Bool is_system_key);
void ulDestroyKeyEvent(ULKeyEvent evt);

typedef enum { kLogLevel_Error = 0, kLogLevel_Warning, kLogLevel_Info } ULLogLevel;

typedef void (*ULLoggerLogMessageCallback)(ULLogLevel log_level, ULString message);

typedef struct {
  ULLoggerLogMessageCallback log_message;
} ULLogger;

ULMouseEvent
ulCreateMouseEvent(ULMouseEventType type, int x, int y, ULMouseButton button);
void ulDestroyMouseEvent(ULMouseEvent evt);
unsigned int ulSurfaceGetWidth(ULSurface surface);
unsigned int ulSurfaceGetHeight(ULSurface surface);
unsigned int ulSurfaceGetRowBytes(ULSurface surface);
size_t ulSurfaceGetSize(ULSurface surface);
void* ulSurfaceLockPixels(ULSurface surface);
void ulSurfaceUnlockPixels(ULSurface surface);
void ulSurfaceResize(ULSurface surface, unsigned int width, unsigned int height);
void ulSurfaceSetDirtyBounds(ULSurface surface, ULIntRect bounds);
ULIntRect ulSurfaceGetDirtyBounds(ULSurface surface);
void ulSurfaceClearDirtyBounds(ULSurface surface);
void* ulSurfaceGetUserData(ULSurface surface);
ULBitmap ulBitmapSurfaceGetBitmap(ULBitmapSurface surface);
typedef void* (
    *ULSurfaceDefinitionCreateCallback)(unsigned int width, unsigned int height);
typedef void (*ULSurfaceDefinitionDestroyCallback)(void* user_data);
typedef unsigned int (*ULSurfaceDefinitionGetWidthCallback)(void* user_data);
typedef unsigned int (*ULSurfaceDefinitionGetHeightCallback)(void* user_data);
typedef unsigned int (*ULSurfaceDefinitionGetRowBytesCallback)(void* user_data);
typedef size_t (*ULSurfaceDefinitionGetSizeCallback)(void* user_data);
typedef void* (*ULSurfaceDefinitionLockPixelsCallback)(void* user_data);
typedef void (*ULSurfaceDefinitionUnlockPixelsCallback)(void* user_data);
typedef void (*ULSurfaceDefinitionResizeCallback)(
    void* user_data,
    unsigned int width,
    unsigned int height);

typedef struct {
  ULSurfaceDefinitionCreateCallback create;
  ULSurfaceDefinitionDestroyCallback destroy;
  ULSurfaceDefinitionGetWidthCallback get_width;
  ULSurfaceDefinitionGetHeightCallback get_height;
  ULSurfaceDefinitionGetRowBytesCallback get_row_bytes;
  ULSurfaceDefinitionGetSizeCallback get_size;
  ULSurfaceDefinitionLockPixelsCallback lock_pixels;
  ULSurfaceDefinitionUnlockPixelsCallback unlock_pixels;
  ULSurfaceDefinitionResizeCallback resize;
} ULSurfaceDefinition;

void ulPlatformSetLogger(ULLogger logger);
void ulPlatformSetFileSystem(ULFileSystem file_system);
void ulPlatformSetFontLoader(ULFontLoader font_loader);
void ulPlatformSetSurfaceDefinition(ULSurfaceDefinition surface_definition);
void ulPlatformSetGPUDriver(ULGPUDriver gpu_driver);
void ulPlatformSetClipboard(ULClipboard clipboard);
ULRenderer ulCreateRenderer(ULConfig config);
void ulDestroyRenderer(ULRenderer renderer);
void ulUpdate(ULRenderer renderer);
void ulRefreshDisplay(ULRenderer renderer, unsigned int display_id);
void ulRender(ULRenderer renderer);
void ulPurgeMemory(ULRenderer renderer);
void ulLogMemoryUsage(ULRenderer renderer);
_Bool ulStartRemoteInspectorServer(
    ULRenderer renderer,
    const char* address,
    unsigned short port);
void ulSetGamepadDetails(
    ULRenderer renderer,
    unsigned int index,
    ULString id,
    unsigned int axis_count,
    unsigned int button_count);
void ulFireGamepadEvent(ULRenderer renderer, ULGamepadEvent evt);
void ulFireGamepadAxisEvent(ULRenderer renderer, ULGamepadAxisEvent evt);
void ulFireGamepadButtonEvent(ULRenderer renderer, ULGamepadButtonEvent evt);
ULScrollEvent ulCreateScrollEvent(ULScrollEventType type, int delta_x, int delta_y);
void ulDestroyScrollEvent(ULScrollEvent evt);
ULGamepadEvent ulCreateGamepadEvent(unsigned int index, ULGamepadEventType type);
void ulDestroyGamepadEvent(ULGamepadEvent evt);
ULGamepadAxisEvent
ulCreateGamepadAxisEvent(unsigned int index, unsigned int axis_index, double value);
void ulDestroyGamepadAxisEvent(ULGamepadAxisEvent evt);
ULGamepadButtonEvent
ulCreateGamepadButtonEvent(unsigned int index, unsigned int button_index, double value);
void ulDestroyGamepadButtonEvent(ULGamepadButtonEvent evt);
ULSession ulCreateSession(ULRenderer renderer, _Bool is_persistent, ULString name);
void ulDestroySession(ULSession session);
ULSession ulDefaultSession(ULRenderer renderer);
_Bool ulSessionIsPersistent(ULSession session);
ULString ulSessionGetName(ULSession session);
unsigned long long ulSessionGetId(ULSession session);
ULString ulSessionGetDiskPath(ULSession session);
ULViewConfig ulCreateViewConfig();
void ulDestroyViewConfig(ULViewConfig config);
void ulViewConfigSetDisplayId(ULViewConfig config, unsigned int display_id);
void ulViewConfigSetIsAccelerated(ULViewConfig config, _Bool is_accelerated);
void ulViewConfigSetIsTransparent(ULViewConfig config, _Bool is_transparent);
void ulViewConfigSetInitialDeviceScale(
    ULViewConfig config,
    double initial_device_scale);
void ulViewConfigSetInitialFocus(ULViewConfig config, _Bool is_focused);
void ulViewConfigSetEnableImages(ULViewConfig config, _Bool enabled);
void ulViewConfigSetEnableJavaScript(ULViewConfig config, _Bool enabled);
void ulViewConfigSetFontFamilyStandard(ULViewConfig config, ULString font_name);
void ulViewConfigSetFontFamilyFixed(ULViewConfig config, ULString font_name);
void ulViewConfigSetFontFamilySerif(ULViewConfig config, ULString font_name);
void ulViewConfigSetFontFamilySansSerif(ULViewConfig config, ULString font_name);
void ulViewConfigSetUserAgent(ULViewConfig config, ULString agent_string);
ULView ulCreateView(
    ULRenderer renderer,
    unsigned int width,
    unsigned int height,
    ULViewConfig view_config,
    ULSession session);
void ulDestroyView(ULView view);
ULString ulViewGetURL(ULView view);
ULString ulViewGetTitle(ULView view);
unsigned int ulViewGetWidth(ULView view);
unsigned int ulViewGetHeight(ULView view);
unsigned int ulViewGetDisplayId(ULView view);
void ulViewSetDisplayId(ULView view, unsigned int display_id);
double ulViewGetDeviceScale(ULView view);
void ulViewSetDeviceScale(ULView view, double scale);
_Bool ulViewIsAccelerated(ULView view);
_Bool ulViewIsTransparent(ULView view);
_Bool ulViewIsLoading(ULView view);
ULRenderTarget ulViewGetRenderTarget(ULView view);
ULSurface ulViewGetSurface(ULView view);
void ulViewLoadHTML(ULView view, ULString html_string);
void ulViewLoadURL(ULView view, ULString url_string);
void ulViewResize(ULView view, unsigned int width, unsigned int height);
JSContextRef ulViewLockJSContext(ULView view);
void ulViewUnlockJSContext(ULView view);
ULString ulViewEvaluateScript(ULView view, ULString js_string, ULString* exception);
_Bool ulViewCanGoBack(ULView view);
_Bool ulViewCanGoForward(ULView view);
void ulViewGoBack(ULView view);
void ulViewGoForward(ULView view);
void ulViewGoToHistoryOffset(ULView view, int offset);
void ulViewReload(ULView view);
void ulViewStop(ULView view);
void ulViewFocus(ULView view);
void ulViewUnfocus(ULView view);
_Bool ulViewHasFocus(ULView view);
_Bool ulViewHasInputFocus(ULView view);
void ulViewFireKeyEvent(ULView view, ULKeyEvent key_event);
void ulViewFireMouseEvent(ULView view, ULMouseEvent mouse_event);
void ulViewFireScrollEvent(ULView view, ULScrollEvent scroll_event);
typedef void (*ULChangeTitleCallback)(void* user_data, ULView caller, ULString title);
void ulViewSetChangeTitleCallback(
    ULView view,
    ULChangeTitleCallback callback,
    void* user_data);
typedef void (*ULChangeURLCallback)(void* user_data, ULView caller, ULString url);
void ulViewSetChangeURLCallback(
    ULView view,
    ULChangeURLCallback callback,
    void* user_data);
typedef void (
    *ULChangeTooltipCallback)(void* user_data, ULView caller, ULString tooltip);
void ulViewSetChangeTooltipCallback(
    ULView view,
    ULChangeTooltipCallback callback,
    void* user_data);
typedef void (*ULChangeCursorCallback)(void* user_data, ULView caller, ULCursor cursor);
void ulViewSetChangeCursorCallback(
    ULView view,
    ULChangeCursorCallback callback,
    void* user_data);
typedef void (*ULAddConsoleMessageCallback)(
    void* user_data,
    ULView caller,
    ULMessageSource source,
    ULMessageLevel level,
    ULString message,
    unsigned int line_number,
    unsigned int column_number,
    ULString source_id);
void ulViewSetAddConsoleMessageCallback(
    ULView view,
    ULAddConsoleMessageCallback callback,
    void* user_data);
typedef ULView (*ULCreateChildViewCallback)(
    void* user_data,
    ULView caller,
    ULString opener_url,
    ULString target_url,
    _Bool is_popup,
    ULIntRect popup_rect);
void ulViewSetCreateChildViewCallback(
    ULView view,
    ULCreateChildViewCallback callback,
    void* user_data);
typedef ULView (*ULCreateInspectorViewCallback)(
    void* user_data,
    ULView caller,
    _Bool is_local,
    ULString inspected_url);
void ulViewSetCreateInspectorViewCallback(
    ULView view,
    ULCreateInspectorViewCallback callback,
    void* user_data);
typedef void (*ULBeginLoadingCallback)(
    void* user_data,
    ULView caller,
    unsigned long long frame_id,
    _Bool is_main_frame,
    ULString url);
void ulViewSetBeginLoadingCallback(
    ULView view,
    ULBeginLoadingCallback callback,
    void* user_data);
typedef void (*ULFinishLoadingCallback)(
    void* user_data,
    ULView caller,
    unsigned long long frame_id,
    _Bool is_main_frame,
    ULString url);
void ulViewSetFinishLoadingCallback(
    ULView view,
    ULFinishLoadingCallback callback,
    void* user_data);
typedef void (*ULFailLoadingCallback)(
    void* user_data,
    ULView caller,
    unsigned long long frame_id,
    _Bool is_main_frame,
    ULString url,
    ULString description,
    ULString error_domain,
    int error_code);
void ulViewSetFailLoadingCallback(
    ULView view,
    ULFailLoadingCallback callback,
    void* user_data);
typedef void (*ULWindowObjectReadyCallback)(
    void* user_data,
    ULView caller,
    unsigned long long frame_id,
    _Bool is_main_frame,
    ULString url);
void ulViewSetWindowObjectReadyCallback(
    ULView view,
    ULWindowObjectReadyCallback callback,
    void* user_data);
typedef void (*ULDOMReadyCallback)(
    void* user_data,
    ULView caller,
    unsigned long long frame_id,
    _Bool is_main_frame,
    ULString url);
void ulViewSetDOMReadyCallback(
    ULView view,
    ULDOMReadyCallback callback,
    void* user_data);
typedef void (*ULUpdateHistoryCallback)(void* user_data, ULView caller);
void ulViewSetUpdateHistoryCallback(
    ULView view,
    ULUpdateHistoryCallback callback,
    void* user_data);
void ulViewSetNeedsPaint(ULView view, _Bool needs_paint);
_Bool ulViewGetNeedsPaint(ULView view);
void ulViewCreateLocalInspectorView(ULView view);
typedef struct C_Settings* ULSettings;
typedef struct C_App* ULApp;
typedef struct C_Window* ULWindow;
typedef struct C_Monitor* ULMonitor;
typedef struct C_Overlay* ULOverlay;

typedef enum {
  kWindowFlags_Borderless = 1 << 0,
  kWindowFlags_Titled = 1 << 1,
  kWindowFlags_Resizable = 1 << 2,
  kWindowFlags_Maximizable = 1 << 3,
  kWindowFlags_Hidden = 1 << 4,
} ULWindowFlags;

ULSettings ulCreateSettings();
void ulDestroySettings(ULSettings settings);
void ulSettingsSetDeveloperName(ULSettings settings, ULString name);
void ulSettingsSetAppName(ULSettings settings, ULString name);
void ulSettingsSetFileSystemPath(ULSettings settings, ULString path);
void ulSettingsSetLoadShadersFromFileSystem(ULSettings settings, _Bool enabled);
void ulSettingsSetForceCPURenderer(ULSettings settings, _Bool force_cpu);
ULApp ulCreateApp(ULSettings settings, ULConfig config);
void ulDestroyApp(ULApp app);
typedef void (*ULUpdateCallback)(void* user_data);
void ulAppSetUpdateCallback(ULApp app, ULUpdateCallback callback, void* user_data);
_Bool ulAppIsRunning(ULApp app);
ULMonitor ulAppGetMainMonitor(ULApp app);
ULRenderer ulAppGetRenderer(ULApp app);
void ulAppRun(ULApp app);
void ulAppQuit(ULApp app);
double ulMonitorGetScale(ULMonitor monitor);
unsigned int ulMonitorGetWidth(ULMonitor monitor);
unsigned int ulMonitorGetHeight(ULMonitor monitor);
ULWindow ulCreateWindow(
    ULMonitor monitor,
    unsigned int width,
    unsigned int height,
    _Bool fullscreen,
    unsigned int window_flags);
void ulDestroyWindow(ULWindow window);
typedef void (*ULCloseCallback)(void* user_data, ULWindow window);
void ulWindowSetCloseCallback(
    ULWindow window,
    ULCloseCallback callback,
    void* user_data);
typedef void (*ULResizeCallback)(
    void* user_data,
    ULWindow window,
    unsigned int width,
    unsigned int height);
void ulWindowSetResizeCallback(
    ULWindow window,
    ULResizeCallback callback,
    void* user_data);
unsigned int ulWindowGetScreenWidth(ULWindow window);
unsigned int ulWindowGetWidth(ULWindow window);
unsigned int ulWindowGetScreenHeight(ULWindow window);
unsigned int ulWindowGetHeight(ULWindow window);
void ulWindowMoveTo(ULWindow window, int x, int y);
void ulWindowMoveToCenter(ULWindow);
int ulWindowGetPositionX(ULWindow window);
int ulWindowGetPositionY(ULWindow window);
_Bool ulWindowIsFullscreen(ULWindow window);
double ulWindowGetScale(ULWindow window);
void ulWindowSetTitle(ULWindow window, const char* title);
void ulWindowSetCursor(ULWindow window, ULCursor cursor);
void ulWindowShow(ULWindow window);
void ulWindowHide(ULWindow window);
_Bool ulWindowIsVisible(ULWindow window);
void ulWindowClose(ULWindow window);
int ulWindowScreenToPixels(ULWindow window, int val);
int ulWindowPixelsToScreen(ULWindow window, int val);
void* ulWindowGetNativeHandle(ULWindow window);
ULOverlay
ulCreateOverlay(ULWindow window, unsigned int width, unsigned int height, int x, int y);
ULOverlay ulCreateOverlayWithView(ULWindow window, ULView view, int x, int y);
void ulDestroyOverlay(ULOverlay overlay);
ULView ulOverlayGetView(ULOverlay overlay);
unsigned int ulOverlayGetWidth(ULOverlay overlay);
unsigned int ulOverlayGetHeight(ULOverlay overlay);
int ulOverlayGetX(ULOverlay overlay);
int ulOverlayGetY(ULOverlay overlay);
void ulOverlayMoveTo(ULOverlay overlay, int x, int y);
void ulOverlayResize(ULOverlay overlay, unsigned int width, unsigned int height);
_Bool ulOverlayIsHidden(ULOverlay overlay);
void ulOverlayHide(ULOverlay overlay);
void ulOverlayShow(ULOverlay overlay);
_Bool ulOverlayHasFocus(ULOverlay overlay);
void ulOverlayFocus(ULOverlay overlay);
void ulOverlayUnfocus(ULOverlay overlay);
void ulEnablePlatformFontLoader();
void ulEnablePlatformFileSystem(ULString base_dir);
void ulEnableDefaultLogger(ULString log_path);
