#!/usr/bin/env bash
set -euo pipefail
. "$(dirname "${BASH_SOURCE}")/_base.sh"

_MODULE_DIR="ultralight_cffi"
_BINDINGS_H_FILE="${_MODULE_DIR}/_bindings.h"
_BINDINGS_PY_FILE="${_MODULE_DIR}/_bindings.py"

_docker_gcc() {
  # TODO: consider pinning gcc image, rather than latest
  docker run --rm \
    -i \
    -v "$PWD":/workspace \
    -v "$(base::abspath ultralight-api)":/ultralight-api \
    gcc:latest \
    gcc "$@"
}

_gcc() {
  _docker_gcc # TODO: change to `gcc` if desired, and/or customize
}

_post_process() {
  cat <<- EOF
    /*
     * WARNING: This file is generated automatically by \`scripts/gen_bindings\`.
     * Do not edit this file by hand!
     *
     * See \`README.md\`.
     */

EOF
  sed '/#pragma .*/d'
}

_build_bindings_h() {
  echo '
    #include <AppCore/CAPI.h>
    #include <Ultralight/CAPI.h>
  ' \
    | _docker_gcc \
      -E \
      -P \
      -I ultralight-api \
      -D'__attribute__(x)=' \
      -D '__builtin_va_list=void*' \
      - \
    | _post_process \
    | clang-format \
      > "${_BINDINGS_H_FILE}"
}

_build_bindings_py() {
  ##
  ## Generates `ultralight_cffi/_bindings.py` using the CFFI builder and
  ## performs post-processing steps (Black, annotation tweaks, etc.).
  ##
  ## TODO: possibly move the post-processing into the `_build.py` script, for
  ## less bashery.
  ##

  .venv/bin/python scripts/_build.py
  .venv/bin/black "${_BINDINGS_PY_FILE}"

  ##
  ## HACK: The official `types-cffi` seems to expect `str` instead of `bytes` in
  ## the generated CFFI Python code; a hacky workaround is to just slap a
  ## `# type: ignore[arg-type]` on each offending line.  Seems like this
  ## shouldn't be necessary, or that there should be another way.
  ##
  ## (Alternatively, mypy could be configured to have a special rule for that
  ## particular file, but module-specific mypy rules seem to be quite finicky).
  ##

  sed -E -i \
    '/^    _(types|globals|struct_unions|enums|typenames)=/ s/$/  # type: ignore[arg-type]/' \
    "${_BINDINGS_PY_FILE}"
}

_main() {
  scripts/_init
  _build_bindings_h
  _build_bindings_py
}

_main
